{"hidden":true,"children":[{"configs":{"itemId":"module","title":"{#fileName#}"},"expanded":true,"children":[{"configs":{"layout":"fit","border":"false","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"border":"false","itemId":"panel1"},"expanded":true,"children":[{"configs":{"isConfig":"true","itemId":"tbar"},"expanded":true,"children":[{"configs":{"itemId":"saveBtn","tooltip":"保存当前打开的文件 (Ctrl+S)","disabled":"true","text":"保存","iconCls":"save_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.saveFile();"}},{"configs":{"itemId":"item1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"pathText","flex":"1","readOnly":"true","selectOnFocus":"true","value":"{#file#}"},"expanded":false,"children":[],"type":"text"},{"configs":{"itemId":"charsetBtn","tooltip":"设置当前使用的字符编码","text":"编码"},"expanded":false,"children":[],"type":"item","events":{"click":"app.setCharset();"}},{"configs":{"itemId":"cursorLbl","xtype":"tbtext","width":"100","style":"text-align:right","text":"1 : 1"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"item3","text":" "},"expanded":false,"children":[],"type":"item"}],"type":"toolbar"}],"type":"panel"}],"type":"viewport","events":{"afterrender":"app.openFile();"}}],"type":"module","events":{"beforeunload":"if (app.isModified)\n  return '\u201c' + Wb.getFilename(app.path) + '\u201d 已经被修改。';","initialize":"Wb.apply(app, {\n  path: \"{#file#}\", //使用外部参数\n  saveFile: function(callback, noConfirm) {\n    if (!app.isModified) {\n      Ext.callback(callback);\n      return;\n    }\n    var content, charset, data = [];\n    content = app.editor.getValue();\n    charset = app.charsetBtn.text;\n    if (charset == 'default')\n      charset = null;\n    data.push({\n      file: app.path,\n      lastModified: app.lastModified,\n      content: content,\n      charset: charset\n    });\n    Wb.request({\n      url: 'm?xwl=dev/ide/save',\n      jsonData: data,\n      params: {\n        noConfirm: Wb.getBool(noConfirm, false)\n      },\n      showError: false,\n      success: function(resp) {\n        var respObj = Wb.decode(resp.responseText),\n          index = 0;\n        app.editor.savedText = app.editor.getValue();\n        app.lastModified = Wb.strToDate(respObj[0]);\n        app.unModified();\n        Ext.callback(callback);\n      },\n      failure: function(resp) {\n        var msg = resp.responseText,\n          errMsg = Wb.getError(msg, 101);\n        if (errMsg) {\n          Wb.confirm(errMsg, function() {\n            app.saveFile(callback, true);\n          });\n        } else\n          Wb.except(resp);\n      }\n    });\n  },\n  unModified: function() {\n    app.isModified = false;\n    Wb.unModified(contextOwner);\n    app.saveBtn.setDisabled(true);\n  },\n  setModified: function() {\n    app.isModified = true;\n    Wb.setModified(contextOwner);\n    app.saveBtn.setDisabled(false);\n  },\n  setCharset: function() {\n    Wb.prompt({\n      title: '设置编码',\n      items: {\n        fieldLabel: '编码格式',\n        itemId: 'charset',\n        xtype: 'combo',\n        value: app.charsetBtn.text,\n        allowBlank: false,\n        store: ['default', 'utf-8', 'gbk']\n      },\n      handler: function(values, win) {\n        if (values.charset == app.charsetBtn.text) {\n          win.close();\n          return;\n        }\n        Wb.request({\n          url: 'm?xwl=dev/ide/open',\n          params: Ext.apply({\n            type: 1,\n            fileNames: Wb.encode([app.path])\n          }, values),\n          success: function(resp) {\n            var obj = Wb.decode(resp.responseText)[0];\n            app.charsetBtn.setText(values.charset);\n            app.lastModified = Wb.strToDate(obj.lastModified);\n            app.editor.setValue(obj.content);\n            win.close();\n            app.editor.focus();\n          }\n        });\n      }\n    });\n  },\n  openFile: function() {\n    function render() {\n      Wb.request({\n        url: 'm?xwl=dev/ide/open',\n        params: {\n          type: 1,\n          fileNames: [app.path]\n        },\n        success: function(resp) {\n          app.doOpen(Wb.decode(resp.responseText)[0]);\n        }\n      });\n    }\n    if (window.CodeMirror)\n      render();\n    else {\n      Wb.addLink(['wb/libs/cm/cmirror{#debugSuffix#}.css', 'wb/libs/cm/cmirror{#debugSuffix#}.js'],\n        render\n      );\n    }\n  },\n  doOpen: function(content) {\n    var config, extConfig, isImage, fileExt;\n    fileExt = Wb.extractFileExt(content.file).toLowerCase();\n    isImage = Wb.indexOf(['gif', 'jpg', 'png', 'bmp'], fileExt) != -1;\n    app.panel1.update('<textarea><\/textarea>');\n    app.charsetBtn.setText(isImage ? 'Base64' : content.charset);\n    app.charsetBtn.setDisabled(isImage);\n    app.lastModified = Wb.strToDate(content.lastModified);\n    if (contextOwner) {\n      contextOwner.confirmDisabled = true; //禁止关闭tab页时系统的beforeunload提示\n      contextOwner.mon(contextOwner, {\n        beforeclose: function(card) {\n          if (app.isModified) {\n            Wb.choose('\"' + Wb.getFilename(app.path) + '\" 已经被修改，保存所做的更改吗？',\n              function(btn) {\n                if (btn == 'yes')\n                  app.saveFile(function() {\n                    card.close();\n                  });\n                else if (btn == 'no') {\n                  app.isModified = false;\n                  card.close();\n                }\n              });\n            return false;\n          }\n        },\n        activate: function(me) {\n          if (me.lastScrollInfo)\n            app.editor.scrollTo(me.lastScrollInfo.left, me.lastScrollInfo.top);\n          setTimeout(function() {\n            app.editor.focus();\n          }, 10);\n        },\n        beforedeactivate: function(me) {\n          me.lastScrollInfo = app.editor.getScrollInfo();\n        }\n      });\n    }\n    config = {\n      lineNumbers: true,\n      mode: 'text/javascript',\n      theme: Wb.editTheme,\n      extraKeys: {\n        'Ctrl-/': 'toggleComment',\n        'Ctrl-,': function(doc) {\n          if (doc.modifyCursor)\n            doc.setCursor(doc.modifyCursor);\n        },\n        'Ctrl-S': function() {\n          app.saveFile();\n        },\n        'Shift-Ctrl-F': function(doc) {\n          if (doc.options.readOnly)\n            return;\n          var cursor = doc.getCursor(),\n            scroll = doc.getScrollInfo();\n          doc.autoFormatRange({\n            line: 0,\n            ch: 0\n          }, {\n            line: Number.MAX_VALUE,\n            ch: Number.MAX_VALUE\n          });\n          doc.scrollTo(scroll.left, scroll.top);\n          doc.setCursor(cursor);\n        }\n      }\n    };\n    switch (fileExt) {\n      case 'js':\n      case 'ss':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        config.extraKeys['Alt-/'] = 'autocomplete';\n        config.extraKeys['.'] = function(doc) {\n          if (doc.options.readOnly)\n            return;\n          doc.replaceSelection('.');\n          if (doc.hintTimer)\n            clearTimeout(doc.hintTimer);\n          doc.hintTimer = setTimeout(function() {\n            CodeMirror.showHint(doc);\n          }, 100);\n        };\n        extConfig = {\n          mode: {\n            name: 'text/javascript',\n            globalVars: true\n          },\n          gutters: ['CodeMirror-lint-markers'],\n          lint: true,\n          matchBrackets: true\n        };\n        break;\n      case 'css':\n        extConfig = {\n          mode: 'text/css',\n          gutters: ['CodeMirror-lint-markers'],\n          lint: true,\n          matchBrackets: true\n        };\n        break;\n      case 'java':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        extConfig = {\n          mode: 'text/x-java',\n          matchBrackets: true\n        };\n        break;\n      case 'xml':\n        extConfig = {\n          mode: 'application/xml',\n          matchBrackets: true\n        };\n        break;\n      case 'html':\n      case 'htm':\n        extConfig = {\n          mode: 'htmlmixed',\n          matchBrackets: true\n        };\n        break;\n      case 'jsp':\n      case 'jspx':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        extConfig = {\n          mode: 'application/x-jsp',\n          matchBrackets: true\n        };\n        break;\n      case 'json':\n      case 'xwl':\n      case 'expjson':\n        extConfig = {\n          mode: 'application/json',\n          gutters: ['CodeMirror-lint-markers'],\n          matchBrackets: true\n        };\n        break;\n      case 'sql':\n        extConfig = {\n          mode: 'text/x-sql',\n          matchBrackets: true\n        };\n        break;\n      default:\n        extConfig = {\n          mode: 'text/plain'\n        };\n    }\n    Ext.apply(config, extConfig);\n    app.editor = CodeMirror.fromTextArea(app.panel1.el.down('textarea', true), config);\n    app.editor.savedText = content.content;\n    app.editor.on('cursorActivity', function(doc) {\n      var cur = doc.getCursor();\n      doc.lastCursor = cur;\n      app.cursorLbl.setText((cur.line + 1) + ' : ' + (cur.ch + 1));\n    });\n    app.adjustEditorSize(app.panel1, app.panel1.getWidth(), app.panel1.getHeight());\n    app.panel1.mon(app.panel1, 'resize', app.adjustEditorSize);\n    setTimeout(function() {\n      app.editor.setValue(content.content);\n      app.editor.clearHistory();\n      app.editor.on('change', function(doc) {\n        doc.modifyCursor = Ext.apply({}, doc.lastCursor);\n        if (!app.isModified && doc.savedText !== doc.getValue()) {\n          app.setModified();\n        }\n      });\n      app.editor.focus();\n    }, 10);\n  },\n  adjustEditorSize: function(panel, width, height) {\n    if (app.editor && !panel.destroying) {\n      Ext.fly(app.editor.getScrollerElement()).setHeight(height - app.tbar.getHeight());\n      app.editor.refresh();\n    }\n  }\n});"}}],"roles":{"default":1},"title":"文本编辑器","iconCls":"textarea_icon","inframe":false,"pageLink":""}