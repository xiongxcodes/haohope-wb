{"hidden":false,"children":[{"configs":{"itemId":"module","jsLinks":"[\"wb/libs/cm/cmirror{#debugSuffix#}.js\"]","cssLinks":"[\"wb/libs/cm/cmirror{#debugSuffix#}.css\"]"},"expanded":true,"children":[{"configs":{"itemId":"propertyWin","createInstance":"false","closeAction":"destroy","width":"650","layoutType":"vboxForm","title":"属性","autoShow":"true","iconCls":"property_icon","modal":"true","height":"450","maximizable":"true"},"expanded":false,"children":[{"configs":{"itemId":"tableNameText","fieldLabel":"关联表名","readOnly":"true","selectOnFocus":"true"},"expanded":false,"children":[],"type":"text"},{"configs":{"itemId":"fieldsText","fieldLabel":"字段列表","readOnly":"true"},"expanded":false,"children":[],"type":"text"},{"configs":{"layout":"fit","itemId":"fieldset1","padding":"8","flex":"1","title":"字段属性"},"expanded":true,"children":[{"configs":{"itemId":"grid1","pagingBar":"false"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['dataIndex', 'metaType', 'metaSize', 'metaScale', 'metaRequired']"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"viewConfig","enableTextSelection":"true"},"expanded":false,"children":[],"type":"tableview"},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"noCol","xtype":"rownumberer","width":"30"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"nameCol","renderer":"if (record.get('metaRequired'))\n  return '<b>' + value + '<\/b>';\nelse return value;","dataIndex":"dataIndex","flex":"1","text":"字段名称"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"typeCol","dataIndex":"metaType","text":"类型"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"sizeCol","dataIndex":"metaSize","text":"大小","align":"right"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"scaleCol","dataIndex":"metaScale","width":"70","text":"精度","align":"right"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"requiredCol","xtype":"booleancolumn","dataIndex":"metaRequired","trueText":"是","width":"70","text":"必填","falseText":"否"},"expanded":false,"children":[],"type":"column"}],"type":"array"}],"type":"grid"}],"type":"fieldset"}],"type":"window"},{"configs":{"layout":"fit","itemId":"sqlsWin","width":"650","title":"SQL历史记录","iconCls":"script_icon","modal":"true","height":"450","maximizable":"true"},"expanded":false,"children":[{"configs":{"itemId":"sqlGrid","pagingBar":"false","viewConfig":"{\n  downloadBlob: app.downloadBlob,\n  uploadBlob: app.uploadBlob,\n  removeBlob: app.removeBlob\n}","hideHeaders":"true","multiSelect":"true"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['sql']"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"viewConfig"},"expanded":false,"children":[],"type":"tableview","events":{"cellkeydown":"if (e.getKey() == e.ENTER)\n  app.addHisSql();"}},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"sqlCol","dataIndex":"sql","flex":"1","autoWrap":"true"},"expanded":false,"children":[],"type":"column"}],"type":"array"}],"type":"grid","events":{"itemdblclick":"app.addHisSql();"}}],"type":"window","events":{"hide":"var card = app.active();\nif (card && card.editor)\n  setTimeout(function() {\n    card.editor.focus();\n  }, 20);","show":"setTimeout(function() {\n  if (!app.sqlGrid.getSelection().length)\n    app.sqlGrid.setSelection(0);\n  app.sqlGrid.view.focus();\n}, 20);"}},{"configs":{"layout":"border","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"border":"false","itemId":"toolbar","enableOverflow":"true","region":"north"},"expanded":true,"children":[{"configs":{"itemId":"newSqlBtn","tooltip":"添加新的SQL页","text":"新建SQL","iconCls":"sql_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var node = app.tableTree.getSelection()[0];\napp.newSql(node ? node.data.jndi : '');"}},{"configs":{"itemId":"sqlHisBtn","tooltip":"显示历史记录 (Ctrl+H)","text":"SQL记录","iconCls":"script_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.active();\nif (!card || !card.editor)\n  Wb.info('请选择一个SQL页面。');\nelse\n  app.sqlsWin.show();"}},{"configs":{"itemId":"runSqlBtn","tooltip":"运行SQL (Ctrl+Enter)","text":"运行SQL","iconCls":"run_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.active();\nif (card.store.loading)\n  Wb.warn('正在运行SQL中。');\nelse {\n  card.sql = card.editor.getSelection();\n  if (card.sql === '')\n    card.sql = card.editor.getValue();\n  app.runSql(card);\n}"}},{"configs":{"itemId":"line1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"addRecordBtn","handler":"app.addRecord","tooltip":"添加新的记录 (Ctrl+E)","text":"添加","iconCls":"record_add_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"delRecordBtn","handler":"app.delRecord","tooltip":"删除选择的记录 (Ctrl+D)","text":"删除","iconCls":"record_delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"saveBtn","tooltip":"保存当前修改的表格 (Ctrl+S)","text":"保存当前","iconCls":"save_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.save();"}},{"configs":{"itemId":"saveAllBtn","tooltip":"保存全部修改的表格 (Ctrl+Shift+S)","text":"保存全部","iconCls":"save_all_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.save(true);"}},{"configs":{"itemId":"rejectBtn","handler":"app.reject","tooltip":"撤消最后一次保存后的所有更改","text":"撤消","iconCls":"undo_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"filterBtn","xtype":"splitbutton","tooltip":"对表格数据添加过滤条件表达式","text":"过滤","iconCls":"filter_icon"},"expanded":true,"children":[{"configs":{"itemId":"resetFilterBtn","text":"重置过滤"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.active();\nif (card.originSql && card.originSql != card.sql) {\n  card.sql = card.originSql;\n  app.runSql(card);\n}"}}],"type":"item","events":{"click":"var card = app.active();\nWb.promptText('添加过滤条件表达式', function(value, win) {\n  if (!card.originSql)\n    card.originSql = card.sql;\n  if (value) {\n    card.filterCondi = value;\n    card.sql = card.originSql + ' where ' + value;\n  } else card.sql = card.originSql;\n  app.runSql(card, function(a, b, succ) {\n    delete card.store.lastOptions.callback; //防止store.reload时再调用该回调函数\n    if (succ)\n      win.close();\n  });\n}, {\n  iconCls: 'filter_icon',\n  value: card.filterCondi\n});"}},{"configs":{"itemId":"exportBtn","xtype":"splitbutton","text":"导出","iconCls":"db_export_icon"},"expanded":true,"children":[{"configs":{"itemId":"exportServerBtn","text":"导出到服务器...","iconCls":"server_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.active(),\n  store = card.store;\nif (!card.sql) {\n  Wb.warn('无任何数据可导出。');\n  return;\n}\napp.showFileDialog(function(filename, win) {\n  if (store.getTotalCount() > store.getCount() || card.hasBlob) {\n    //从服务器端取数\n    Wb.request({\n      url: 'm?xwl=dev/datainfo/SQL/dbe/exportToServer',\n      timeout: -1,\n      params: {\n        sql: card.sql,\n        jndi: card.jndi,\n        filename: filename\n      },\n      success: function() {\n        win.close();\n      }\n    });\n  } else {\n    //从客户端取数\n    var rows = [];\n    store.each(function(rec) {\n      rows.push(Wb.encode(rec.data));\n    });\n    Wb.request({\n      url: 'm?xwl=dev/datainfo/SQL/dbe/write-file',\n      timeout: -1,\n      params: {\n        data: rows.join('\\n'),\n        gzip: true,\n        filename: filename\n      },\n      success: function() {\n        win.close();\n      }\n    });\n  }\n});"}}],"type":"item","events":{"click":"var card = app.active(),\n  store = card.store;\nif (!card.sql) {\n  Wb.warn('无任何数据可导出。');\n  return;\n}\nif (store.getTotalCount() > store.getCount() || card.hasBlob) {\n  //从服务器端取数\n  Wb.download('m?xwl=sys/tool/db/export', {\n    sql: card.sql,\n    jndi: card.jndi,\n    filename: card.isSql ? 'data.gz' : card.table + '.gz'\n  });\n} else {\n  //从客户端取数\n  var rows = [];\n  store.each(function(rec) {\n    rows.push(Wb.encode(rec.data));\n  });\n  Wb.download('get-file', {\n    data: rows.join('\\n'),\n    gzip: true,\n    filename: card.isSql ? 'data.gz' : card.table + '.gz'\n  }, true);\n}"}},{"configs":{"itemId":"importBtn","xtype":"splitbutton","text":"导入","iconCls":"db_import_icon"},"expanded":true,"children":[{"configs":{"itemId":"importServerBtn","text":"从服务器导入...","iconCls":"server_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.showFileDialog(function(filename, win) {\n  var ext = filename.toLowerCase(),\n    endsWith = Ext.String.endsWith;\n  if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\n    !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\n    Wb.warn('请选择一个gz、txt或Excel格式的文件。');\n    return false;\n  }\n  var card = app.active();\n  app.useTrans = win.down('#transCheck').getValue();\n  Wb.request({\n    url: 'm?xwl=sys/tool/db/import',\n    params: {\n      jndi: card.jndi,\n      table: Wb.addPrefix(card.schema, card.table),\n      fromServer: true,\n      trans: app.useTrans,\n      filename: filename\n    },\n    success: function() {\n      win.close();\n      card.store.reload();\n    }\n  });\n}, true);"}}],"type":"item","events":{"click":"var card = app.active(),\n  ownerApp = app;\nWb.run({\n  url: 'upload-dialog',\n  single: true,\n  success: function(app) {\n    app.upload({\n      url: 'm?xwl=sys/tool/db/import',\n      iconCls: 'import_icon',\n      title: '导入 - ' + card.table,\n      showProgress: false,\n      params: {\n        jndi: card.jndi,\n        table: Wb.addPrefix(card.schema, card.table)\n      },\n      beforeUpload: function() {\n        var ext = app.file.getValue().toLowerCase(),\n          endsWith = Ext.String.endsWith;\n        if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\n          !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\n          Wb.warn('请选择一个gz、txt或Excel格式的文件。');\n          return false;\n        }\n      },\n      success: function() {\n        card.store.reload();\n      }\n    });\n    app.form1.add({\n      xtype: 'checkbox',\n      boxLabel: '导入过程使用事务',\n      hideEmptyLabel: false,\n      checked: true,\n      itemId: 'trans',\n      x: 92,\n      y: 56\n    });\n    //在窗口隐藏时还原\n    app.win.mon(app.win, {\n      hide: {\n        single: true,\n        fn: function(me) {\n          app.form1.down('#trans').destroy();\n        }\n      }\n    });\n  }\n});"}},{"configs":{"itemId":"line","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"propertyBtn","overflowText":"属性","tooltip":"显示当前页面字段详细信息","iconCls":"property_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.active();\nif (!app.tab.getActiveTab())\n  Wb.warn('当前无可用数据。');\nelse if (card.store.loading)\n  Wb.warn('正在执行SQL。');\nelse if (card.store.proxy.reader.rawData) {\n  var win = new Ext.window.Window(app._propertyWin),\n    grid = win.down('#grid1'),\n    cols = card.store.proxy.reader.rawData.columns;\n  grid.store.loadData(cols);\n  grid.store.removeAt(0);\n  //app.tableNameText对象每次均指向最新创建的控件，也可使用win.getComponent方法\n  app.tableNameText.setValue(card.isSql ? '(SQL)' : card.table);\n  app.fieldsText.setValue(Ext.Array.pluck(cols, 'dataIndex').join(', ').substring(2));\n} else\n  Wb.warn('表格无数据。');"}},{"configs":{"itemId":"backBtn","overflowText":"后退","tooltip":"转到上一个页面","iconCls":"left_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"forwardBtn","overflowText":"前进","tooltip":"转到后退前的页面","iconCls":"right_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"autoWidthBtn","overflowText":"自动宽度","tooltip":"自动设置列宽度","iconCls":"table_align_columns_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var grid = app.active().grid;\nif (grid && grid.columns) {\n  Ext.suspendLayouts();\n  app.autoSize(grid);\n  var col, i, j = grid.columns.length;\n  for (i = 1; i < j; i++) {\n    col = grid.columns[i];\n    //基于Neptune的系列主题同其他主题存在字体大小差异，进行微调\n    col.setWidth(col.width + (Wb.isNeptune ? 15 : 10));\n  }\n  Ext.resumeLayouts(true);\n}"}}],"type":"toolbar"},{"configs":{"itemId":"tableTree","split":"true","plugins":"{ptype:'bufferedrenderer'}","width":"200","region":"west","title":"数据库列表","iconCls":"db_icon","collapsible":"true","rootVisible":"false"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['text', 'jndi', 'type', 'schema', 'table']","url":"m?xwl=dev/datainfo/SQL/dbe/get-tree"},"expanded":false,"children":[],"type":"treestore","events":{"beforeload":"operation.params = operation.node.data;"}},{"configs":{"itemId":"tools"},"expanded":true,"children":[{"configs":{"itemId":"refreshBtn","tooltip":"刷新","tooltype":"refresh"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.reload(app.tableTree);"}}],"type":"array"}],"type":"tree","events":{"itemclick":"/*\n点击表名打开表；\n点击数据库名打开指定数据库首个SQL页；\n在SQL页Ctrl+点击数据库或表名在SQL窗口添加点击的文本；\n*/\nvar card, activeCard, replaceText,\n  data = record.data,\n  type = data.type;\nif (e.ctrlKey || type == 'db' || type == 'schema') {\n  activeCard = app.active();\n  if (e.ctrlKey && activeCard && activeCard.isSql && activeCard.jndi == data.jndi)\n    card = activeCard;\n  else {\n    card = app.tab.child('[isSql=true][jndi=' + data.jndi + ']');\n    if (card)\n      app.tab.setActiveTab(card);\n  }\n  if (!card) {\n    app.newSql(data.jndi);\n    card = app.active();\n  }\n  if (e.ctrlKey) {\n    replaceText = data.text;\n    if (type == 'table') {\n      if (data.schema)\n        replaceText = data.schema + '.' + data.table;\n      if (Wb.isEmpty(card.editor.getValue()))\n        replaceText = 'select * from ' + replaceText;\n    }\n    card.editor.replaceSelection(replaceText);\n    setTimeout(function() {\n      card.editor.focus();\n    }, 20);\n  }\n} else if (type == 'table') {\n  app.newTable(data.jndi, data.schema, data.table);\n}","tagEvents":"{\n  itemkeydown: Wb.mimicClick\n}"}},{"configs":{"itemId":"tab","plugins":"['tabreorderer', 'tabclosemenu']","region":"center"},"expanded":true,"children":[],"type":"tab","events":{"tabchange":"app.setButtons();","remove":"app.setButtons();"}}],"type":"viewport","events":{"afterrender":"Wb.setNavigate(app.tab, app.backBtn, app.forwardBtn);\napp.newSql('default');\nnew Ext.KeyNav({\n  viewport: app.viewport1,\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      app.save(e.shiftKey);\n    }\n  },\n  E: {\n    ctrl: true,\n    fn: app.addRecord\n  },\n  D: {\n    ctrl: true,\n    fn: app.delRecord\n  }\n});"}}],"type":"module","events":{"beforeunload":"var title = Wb.getModifiedTitle(app.tab, true);\nif (title !== null)\n  return '表' + title + '已经被修改。';","initialize":"//数据库浏览器默认使用应用端分页，如果需要使用数据库后台无限制分页请参考示例：m?xwl=examples/controls/grid/load-data\n//私有方法定义\nfunction setCard(card) {\n  if (card instanceof Ext.grid.Panel)\n    card.grid = card;\n  else {\n    card.grid = card.down('grid');\n    card.store = card.grid.store;\n  }\n  card.store.mask = card;\n  card.store.card = card;\n  var toolbar = card.grid.down('toolbar');\n  toolbar.insert(toolbar.items.length - 2, ['-', {\n    xtype: 'tbtext',\n    itemId: 'hintLabel',\n    text: ''\n  }]);\n  card.mon(card, 'close', function(card) {\n    var request = card.store.lastRequest;\n    if (request) {\n      var xhr = request.xhr;\n      if (xhr) {\n        card.notShowError = true;\n        xhr.abort();\n      }\n    }\n  });\n  card.hintLabel = toolbar.getComponent('hintLabel');\n  app.tab.setActiveTab(card);\n}\n\nfunction getStore(isSql) {\n    return {\n      url: 'm?xwl=sys/tool/db/execute',\n      timeout: -1,\n      showError: false,\n      remoteSort: !isSql,\n      message: '正在执行SQL...',\n      listeners: {\n        beforeload: function() {\n          var store = this,\n            card = store.card;\n          if (!isSql && card.isModified) {\n            Wb.choose('表 \"' + card.table + '\" 已经被修改，保存所做的更改吗？',\n              function(btn) {\n                if (btn == 'yes')\n                  app.save(false, function() {\n                    store.reload();\n                  });\n                else if (btn == 'no') {\n                  Wb.unModified(card);\n                  store.reload();\n                }\n              });\n            return false;\n          }\n          card.hintLabel.setText('执行中...');\n        },\n        loadraw: function(store, response, succ) {\n          if (!succ) {\n            var card = store.card;\n            if (!card.notShowError) {\n              Wb.except(response, function() {\n                if (store.card.editor)\n                  setTimeout(function() {\n                    store.card.editor.focus();\n                  }, 20);\n              });\n            }\n          }\n        },\n        failure: function(store) {\n          store.card.hintLabel.setText('');\n        },\n        success: function(store) {\n          var cellediting, card = store.card,\n            columns = Wb.getColumns(store),\n            columnsDefine = Wb.encode(columns);\n          if (card.lastColumnsDefine != columnsDefine) {\n            cellediting = card.grid.findPlugin('cellediting');\n            if (cellediting && cellediting.editors) {\n              cellediting.editors.each(Ext.destroy, Ext);\n              cellediting.editors.clear();\n            }\n            app.setColumns(columns, card);\n            card.grid.reconfigure(null, columns);\n            card.lastColumnsDefine = columnsDefine;\n          }\n          card.hintLabel.setText('耗时：' + Wb.formatMilliSecs(store.proxy.reader.rawData.elapsed));\n          if (card.isSql) {\n            var sqlStore = app.sqlGrid.store,\n              rec = Wb.find(sqlStore, 'sql', card.sql);\n            if (rec)\n              sqlStore.remove(rec);\n            sqlStore.insert(0, {\n              sql: card.sql\n            });\n            card.grid.setDisabled(false);\n          }\n        }\n      }\n    };\n  }\n  //公有方法\nExt.apply(app, {\n  //服务端使用事务\n  useTrans: true,\n  //添加新的SQL tab页\n  newSql: function(jndi) {\n    if (!app.sqlIndex)\n      app.sqlIndex = 0;\n    app.sqlIndex++;\n    var card;\n    card = app.tab.add({\n      title: 'SQL' + app.sqlIndex + (jndi == 'default' ? '' : (' - ' + jndi)),\n      jndi: jndi,\n      iconCls: 'sql_icon',\n      closable: true,\n      isSql: true,\n      border: false,\n      layout: 'border',\n      items: [{\n        itemId: 'sqlPanel',\n        xtype: 'container',\n        html: '<textarea><\/textarea>',\n        region: 'north',\n        height: 120,\n        split: true,\n        listeners: {\n          resize: function(panel, width, height) {\n            if (panel.editor && !panel.destroying) {\n              Ext.fly(panel.editor.getScrollerElement()).setHeight(height);\n              panel.editor.refresh();\n            }\n          },\n          afterrender: {\n            single: true,\n            fn: function(panel) {\n              panel.editor = CodeMirror.fromTextArea(panel.el.down('textarea', true), {\n                lineNumbers: true,\n                mode: 'text/x-sql',\n                theme: Wb.editTheme,\n                matchBrackets: true,\n                extraKeys: {\n                  \"Ctrl-Enter\": function() {\n                    app.runSqlBtn.fireEvent('click');\n                  },\n                  \"Ctrl-H\": function() {\n                    app.sqlHisBtn.fireEvent('click');\n                  }\n                }\n              });\n              panel.ownerCt.editor = panel.editor;\n            }\n          }\n        }\n      }, {\n        xtype: 'grid',\n        region: 'center',\n        editable: true,\n        loadColumns: 'none',\n        disabled: true,\n        store: getStore(true),\n        viewConfig: {\n          enableTextSelection: true\n        }\n      }],\n      listeners: {\n        activate: function(panel) {\n          setTimeout(function() {\n            panel.editor.focus();\n          }, 20);\n        }\n      }\n    });\n    setCard(card);\n    setTimeout(function() {\n      card.editor.focus();\n    }, 20);\n  },\n  showFileDialog: function(callback, isOpen) {\n    Wb.run({\n      url: 'open-dialog',\n      single: true,\n      success: function(scope) {\n        scope.show(callback, {\n          extName: '.gz',\n          isSave: !isOpen,\n          title: isOpen ? '导入' : '导出',\n          iconCls: isOpen ? 'import_icon' : 'export_icon',\n          showEvent: isOpen ? function(scope) {\n            app.bbar = scope.win.getDockedItems('toolbar[dock=\"bottom\"]')[0];\n            app.bbar.insert(0, [{\n              xtype: 'checkbox',\n              itemId: 'transCheck',\n              boxLabel: '导入过程使用事务',\n              checked: app.useTrans\n            }, '->']);\n          } : null,\n          hideEvent: isOpen ? function() {\n            app.bbar.remove(app.bbar.items.items[0]); //删除box\n            app.bbar.remove(app.bbar.items.items[0]); //删除->\n          } : null\n        });\n      }\n    });\n  },\n  newTable: function(jndi, schema, table) {\n    var card;\n    app.tab.items.each(function(item) {\n      if (item.table == table && item.jndi == jndi && item.schema == schema) {\n        card = item;\n        return false;\n      }\n    });\n    if (card)\n      app.tab.setActiveTab(card);\n    else {\n      card = app.tab.add({\n        title: table + (jndi == 'default' ? '' : (' - ' + jndi)),\n        jndi: jndi,\n        border: false,\n        isTable: true,\n        sql: 'select * from ' + Wb.addPrefix(schema, table),\n        table: table,\n        schema: schema,\n        iconCls: 'table_icon',\n        hideMode: 'offsets',\n        closable: true,\n        layout: 'fit',\n        items: {\n          xtype: 'grid',\n          loadColumns: 'none',\n          exportFilename: table,\n          downloadBlob: app.downloadBlob,\n          uploadBlob: app.uploadBlob,\n          removeBlob: app.removeBlob,\n          multiSelect: true,\n          editable: true,\n          store: getStore(false),\n          listeners: {\n            selectionchange: function() {\n              app.setButtons();\n            }\n          }\n        },\n        listeners: {\n          afterrender: function(card) {\n            card.grid = card.down('grid');\n          },\n          beforeclose: function(card) {\n            if (card.isModified) {\n              Wb.choose('表\"' + card.table + '\" 已经被修改，保存所做的更改吗？',\n                function(btn) {\n                  if (btn == 'yes')\n                    app.save(false, function() {\n                      card.close();\n                    });\n                  else if (btn == 'no') {\n                    Wb.unModified(card);\n                    card.close();\n                  }\n                });\n              return false;\n            }\n          }\n        }\n\n      });\n      setCard(card);\n      app.runSql(card, true);\n    }\n  },\n  runSql: function(card, callback) {\n    card.store.load({\n      params: {\n        jndi: card.jndi,\n        sql: card.sql\n      },\n      callback: callback\n    });\n  },\n  autoSize: function(grid) {\n    var cols = grid.columns,\n      i, j = cols.length;\n\n    Ext.suspendLayouts();\n    for (i = 1; i < j; i++) {\n      if (cols[i].autoSize)\n        cols[i].autoSize();\n    }\n    Ext.resumeLayouts(true);\n  },\n  addHisSql: function() {\n    var record, card = app.active();\n    record = app.sqlGrid.getSelection()[0];\n    if (record && card && card.editor)\n      card.editor.setValue(record.get('sql'));\n    app.sqlsWin.close(); //closeAction为hide\n  },\n  active: function() {\n    return app.tab.getActiveTab() || {};\n  },\n  setColumns: function(cols, card) {\n    Wb.each(cols, function(col) {\n\n      if (col.category == 'blob') {\n        card.hasBlob = true; //如果存在blob强制从服务器下载数据，因为客户端无blob数据\n      }\n      if (col.editor) {\n        //数据库浏览器为编辑原始数据而进行特殊处理，通常情况无需使用这些步骤，直接使用对应类型控件编辑即可\n        col.editor.listeners = {\n          change: app.onChange\n        };\n        switch (col.category) {\n          case 'timestamp':\n          case 'date':\n          case 'time':\n            col.editor.xtype = 'textfield';\n            col.editor.category = col.category;\n            col.editor.validator = app.dateValidator;\n            col.editor.getValue = app.getDate;\n            col.editor.setValue = app.setDate;\n            col.editor.isEqual = app.isEqual; //重载日期时间型比较方法\n            col.renderer = app.dateRenderer;\n            col.scope = col;\n            break;\n        }\n      }\n      if (card.isSql) {\n        if (col.category == 'text')\n          col.editor.readOnly = true;\n        else\n          delete col.editor;\n      }\n    });\n  },\n  isEqual: function(date1, date2) {\n    if (Ext.isDate(date1) && Ext.isDate(date2))\n      return date1.getTime() === date2.getTime();\n    return !(date1 || date2);\n  },\n  dateRenderer: function(date) {\n    var str, category = this.category;\n    if (category == 'time')\n      return Wb.format(date, 'H:i:s');\n    else if (category == 'date')\n      return Wb.format(date, 'Y-m-d');\n    else {\n      //timestamp\n      str = Wb.dateToStr(date);\n      if (Ext.String.endsWith(str, '00:00:00.000'))\n        return str.substring(0, 10);\n      else if (Ext.String.endsWith(str, '.000'))\n        return str.substring(0, 19);\n      else return str;\n    }\n  },\n  setDate: function(date) {\n    var me = this,\n      value = app.dateRenderer.call(me, date);\n    me.setRawValue(me.valueToRaw(value));\n    return me.mixins.field.setValue.call(me, value);\n  },\n  getDate: function() {\n    var me = this,\n      val = me.rawToValue(me.processRawValue(me.getRawValue()));\n    me.value = val;\n    return app.checkDate.call(me, val, true) || val;\n  },\n  parseDate: function(value, formats) {\n    if (!value)\n      return null;\n    var date, formatArray = formats.split('|');\n    Wb.each(formatArray, function(item) {\n      date = Ext.Date.parse(value, item);\n      if (date)\n        return false;\n    });\n    if (date)\n      return date;\n    else\n      return null;\n  },\n  //编辑器change事件\n  onChange: function(me) {\n    Wb.setModified(me.up('grid').ownerCt);\n    app.setButtons();\n  },\n  setButtons: function() {\n    var card = app.active();\n    app.runSqlBtn.setDisabled(!card.isSql);\n    app.addRecordBtn.setDisabled(!card.isTable || card.isSaving);\n    app.delRecordBtn.setDisabled(!card.isTable || !card.grid.getSelection().length || card.isSaving);\n    app.saveBtn.setDisabled(!card.isTable || !card.isModified || card.isSaving);\n    app.saveAllBtn.setDisabled(Wb.getModifiedTitle(app.tab) === null);\n    app.rejectBtn.setDisabled(app.saveBtn.disabled);\n    app.filterBtn.setDisabled(!card.isTable || card.isSaving);\n    app.importBtn.setDisabled(!card.isTable || card.isSaving);\n    app.exportBtn.setDisabled(!card.isSql && !card.isTable);\n    app.propertyBtn.setDisabled(app.exportBtn.disabled);\n  },\n  save: function(isAll, callback) {\n    if (isAll && app.saveAllBtn.disabled || !isAll && app.saveBtn.disabled)\n      return;\n    var active = app.active(),\n      grid = active.grid;\n    if (active.isTable)\n      grid.plugins[0].completeEdit();\n    if (!isAll && !Wb.verifyGrid(grid)) {\n      return false;\n    }\n    app.tab.items.each(function(card) {\n      if (!card.isModified || card.isSaving)\n        return;\n      if (isAll || active == card) {\n        var store = card.store;\n        card.isSaving = true;\n        Wb.sync({\n          store: store,\n          url: 'm?xwl=sys/tool/db/save',\n          mask: card,\n          message: '正在保存中...',\n          params: {\n            table: Wb.addPrefix(card.schema, card.table),\n            jndi: card.jndi\n          },\n          callback: function(a, succ) {\n            card.isSaving = false;\n            if (succ) {\n              store.commitChanges();\n              Wb.unModified(card);\n              Ext.callback(callback);\n            }\n            app.setButtons();\n          }\n        });\n      }\n    });\n    app.setButtons();\n  },\n  dateValidator: function(value) {\n    var metaType = this.column.metaType;\n    //处理类似Oracle Date类型的bug，表现为返回类型为timestamp但不允许毫秒\n    if (metaType && metaType.toUpperCase() == 'DATE' && value.indexOf('.') != -1)\n      return Wb.format('不允许输入毫秒 \"{0}\"', value);\n    return app.checkDate.call(this, value);\n  },\n  addRecord: function() {\n    if (app.addRecordBtn.disabled) return;\n    var card = app.active();\n    Wb.add(card.grid, {}, 'after', -1, false);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  delRecord: function() {\n    if (app.delRecordBtn.disabled) return;\n    var card = app.active();\n    Wb.remove(card.grid);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  reject: function() {\n    if (app.rejectBtn.disabled) return;\n    Wb.confirm('确定要撤消对表格所做的所有更改吗？', function() {\n      var grid = app.active();\n      Wb.reject(grid);\n      Wb.unModified(grid);\n      app.setButtons();\n    });\n  },\n  checkDate: function(value, returnDate) {\n    if (!value)\n      return returnDate ? value : true;\n    var date, time, dateFormats = Ext.form.field.Date.prototype.altFormats,\n      timeFormats = Ext.form.field.Time.prototype.altFormats;\n    if (this.category == 'time') {\n      if ((date = app.parseDate(value, timeFormats)))\n        return returnDate ? date : true;\n    } else if (this.category == 'date') {\n      if ((date = app.parseDate(value, dateFormats)))\n        return returnDate ? date : true;\n    } else {\n      var pos = value.indexOf(' ');\n      if (pos == -1) {\n        if ((date = app.parseDate(value, dateFormats)))\n          return returnDate ? date : true;\n      } else {\n        if ((date = app.parseDate(value.substring(0, pos), dateFormats)) &&\n          (time = app.parseDate(value.substring(pos + 1), timeFormats))) {\n          if (returnDate) {\n            date.setHours(time.getHours());\n            date.setMinutes(time.getMinutes());\n            date.setSeconds(time.getSeconds());\n            date.setMilliseconds(time.getMilliseconds());\n            return date;\n          } else return true;\n        }\n      }\n    }\n    return returnDate ? null : Wb.format('无效的值 \"{0}\"', value);\n  },\n  downloadBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      card = grid.ownerCt;\n    Wb.download('m?xwl=sys/tool/db/download-blob', Ext.apply({\n      __jndi: grid.jndi,\n      __tableName: Wb.addPrefix(card.schema, card.table),\n      __fieldName: fieldName\n    }, Wb.getData(grid.store.getAt(rowIndex), true)));\n  },\n  uploadBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      card = grid.ownerCt,\n      ownerApp = app,\n      rec = grid.store.getAt(rowIndex);\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    Wb.run({\n      url: 'upload-dialog',\n      single: true,\n      success: function(scope) {\n        scope.upload({\n          url: 'm?xwl=sys/tool/db/upload-blob',\n          iconCls: 'import_icon',\n          title: '导入 - ' + fieldName,\n          params: Ext.apply({\n            __jndi: grid.jndi,\n            __tableName: Wb.addPrefix(card.schema, card.table),\n            __fieldName: fieldName\n          }, Wb.getData(rec, true)),\n          success: function() {\n            rec.set(fieldName, 'blob');\n            rec.commit();\n          }\n        });\n      }\n    });\n  },\n  removeBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      card = grid.ownerCt,\n      rec = grid.store.getAt(rowIndex);\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    Wb.confirm('确定要删除该记录字段 \u201c' + fieldName + '\u201d 的内容吗？', function() {\n      Wb.request({\n        url: 'm?xwl=sys/tool/db/clear-blob',\n        params: Ext.apply({\n          __jndi: grid.jndi,\n          __tableName: Wb.addPrefix(card.schema, card.table),\n          __fieldName: fieldName\n        }, Wb.getData(rec, true)),\n        success: function(resp) {\n          rec.set(fieldName, '');\n          rec.commit();\n        }\n      });\n    });\n  }\n});"}}],"roles":{},"title":"数据浏览","iconCls":"db_icon","inframe":false,"pageLink":""}