{"hidden":false,"children":[{"configs":{"itemId":"module","jsLinks":"[\"wb/libs/cm/cmirror{#debugSuffix#}.js\", \"wb/script/sql{#debugSuffix#}.js\"]","cssLinks":"[\"wb/libs/cm/cmirror{#debugSuffix#}.css\"]"},"expanded":true,"children":[{"configs":{"itemId":"sqlGrid","createInstance":"false","editable":"true","closable":"true","viewConfig":"{\n  enableTextSelection: true\n}","region":"center","loadColumns":"none","multiSelect":"true"},"expanded":false,"children":[{"configs":{"itemId":"store","showError":"false","url":"m?xwl=dev/datainfo/SQL/dbm/execute","timeout":"-1"},"expanded":false,"children":[],"type":"store","events":{"loadraw":"if (!successful) {\n  if (!store.notShowError) {\n    Wb.except(response, function() {\n      if (store.editor)\n        setTimeout(function() {\n          store.editor.focus();\n        }, 50);\n    });\n  }\n}\napp.setButtons();","success":"var cellediting, grid = store.bindTable,\n  columns = Wb.getColumns(store),\n  columnsDefine = Wb.encode(columns);\n//SQL相同列模型无需重建\nif (grid.lastColumnsDefine != columnsDefine) {\n  //显式销毁编辑器\n  cellediting = grid.findPlugin('cellediting');\n  if (cellediting && cellediting.editors) {\n    cellediting.editors.each(Ext.destroy, Ext);\n    cellediting.editors.clear();\n  }\n  Wb.each(columns, function(col) {\n    if (col.category == 'blob')\n      grid.hasBlob = true; //用于导出的标识\n    if (col.editor) {\n      if (!grid.realEditable) {\n        //用于复制大文本数据\n        if (col.category == 'text')\n          col.editor.readOnly = true;\n        else\n          delete col.editor;\n        return;\n      }\n      col.editor.listeners = {\n        change: app.onChange\n      };\n      switch (col.category) {\n        case 'timestamp':\n        case 'date':\n        case 'time':\n          col.editor.xtype = 'textfield';\n          col.editor.category = col.category;\n          col.editor.validator = app.dateValidator;\n          col.editor.getValue = app.getDate;\n          col.editor.setValue = app.setDate;\n          col.editor.isEqual = app.isEqual;\n          col.renderer = app.dateRenderer;\n          col.scope = col;\n          break;\n      }\n    }\n  });\n  grid.reconfigure(null, columns);\n  grid.lastColumnsDefine = columnsDefine;\n}\ngrid.hintLabel.setText('耗时：' + Wb.formatMilliSecs(store.proxy.reader.rawData.elapsed));\nif (store.bindTable.disabled)\n  store.bindTable.setDisabled(false);","failure":"var grid = store.bindTable;\ngrid.reconfigure(null, []);\ndelete grid.lastColumnsDefine;\ngrid.hintLabel.setText('');","beforeload":"operation.params.useDict = app.useDictItem.pressed;"}}],"type":"grid","events":{"selectionchange":"app.setButtons();","afterrender":"var toolbar = grid.down('pagingtoolbar');\ngrid.hintLabel = toolbar.insert(toolbar.items.length - 2, ['-', {\n  xtype: 'tbtext',\n  text: ''\n}])[1];","destroy":"var request = grid.store.lastRequest;\nif (request) {\n  var xhr = request.xhr;\n  if (xhr) {\n    grid.store.notShowError = true;\n    xhr.abort();\n  }\n}","beforeclose":"if (grid.isModified) {\n  Wb.choose('表\"' + grid.tableName + '\" 已经被修改，保存所做的更改吗？',\n    function(btn) {\n      if (btn == 'yes')\n        grid.save(function() {\n          grid.close();\n        });\n      else if (btn == 'no') {\n        Wb.unModified(grid);\n        grid.close();\n      }\n    });\n  return false;\n}"}},{"configs":{"border":"false","layout":"border","itemId":"sqlCard","createInstance":"false","closable":"true"},"expanded":false,"children":[{"configs":{"itemId":"sqlEditor","split":"true","html":"<textarea><\/textarea>","region":"north","height":"120"},"expanded":false,"children":[],"type":"container","events":{"afterrender":"container.ownerCt.editor = container.editor = CodeMirror.fromTextArea(container.el.down('textarea', true), {\n  lineNumbers: true,\n  mode: 'text/x-sql',\n  theme: Wb.editTheme,\n  matchBrackets: true,\n  extraKeys: {\n    'Ctrl-Enter': function() {\n      app.runSql();\n    },\n    'Shift-Ctrl-F': function(doc) {\n      app.formatScript(doc);\n    },\n    'Alt-/': 'autocomplete',\n    '.': function(doc) {\n      doc.replaceSelection('.');\n      if (doc.hintTimer)\n        clearTimeout(doc.hintTimer);\n      doc.hintTimer = setTimeout(function() {\n        CodeMirror.showHint(doc);\n      }, 100);\n    }\n  }\n});\ncontainer.ownerCt.editor.jndi = container.ownerCt.jndi;","resize":"if (container.editor && !container.destroying) {\n  Ext.fly(container.editor.getScrollerElement()).setHeight(height);\n  container.editor.refresh();\n}"}},{"configs":{"itemId":"centerComp","region":"center"},"expanded":false,"children":[],"type":"comp"}],"type":"panel","events":{"activate":"if (panel.editor && !panel.el.isMasked()) {\n  setTimeout(function() {\n    panel.editor.focus();\n  }, 50);\n}"}},{"configs":{"layout":"fit","border":"false","tagConfigs":"{\n  save: app.saveScript,\n  loadProperties: app.loadScriptProperties\n}","itemId":"scriptEditCard","createInstance":"false","closable":"true"},"expanded":false,"children":[{"configs":{"itemId":"sqlEditor","split":"true","html":"<textarea><\/textarea>","region":"north","height":"120"},"expanded":false,"children":[],"type":"container","events":{"afterrender":"container.ownerCt.editor = container.editor = CodeMirror.fromTextArea(container.el.down('textarea', true), {\n  lineNumbers: true,\n  mode: 'text/x-sql',\n  theme: Wb.editTheme,\n  matchBrackets: true,\n  extraKeys: {\n    'Shift-Ctrl-F': function(doc) {\n      app.formatScript(doc);\n    },\n    'Alt-/': 'autocomplete',\n    '.': function(doc) {\n      doc.replaceSelection('.');\n      if (doc.hintTimer)\n        clearTimeout(doc.hintTimer);\n      doc.hintTimer = setTimeout(function() {\n        CodeMirror.showHint(doc);\n      }, 100);\n    }\n  }\n});\ncontainer.editor.on('change', function() {\n  var card = container.ownerCt;\n  if (!card.stopChangeEvent && !card.isModified) {\n    Wb.setModified(card);\n    app.saveItem.setDisabled(false);\n    app.saveAllItem.setDisabled(false);\n  }\n});","resize":"if (container.editor && !container.destroying) {\n  Ext.fly(container.editor.getScrollerElement()).setHeight(height);\n  container.editor.refresh();\n}"}}],"type":"panel","events":{"activate":"if (panel.editor && !panel.el.isMasked()) {\n  setTimeout(function() {\n    panel.editor.focus();\n  }, 50);\n}","beforeclose":"if (panel.isModified) {\n  Wb.choose('\"' + panel.objectName + '\" 已经被修改，保存所做的更改吗？',\n    function(btn) {\n      if (btn == 'yes')\n        panel.save(function() {\n          panel.close();\n        });\n      else if (btn == 'no') {\n        Wb.unModified(panel);\n        panel.close();\n      }\n    });\n  return false;\n}"}},{"configs":{"itemId":"fieldTypeStore","fields":"['type']"},"expanded":false,"children":[],"type":"store"},{"configs":{"layout":"fit","itemId":"addTableWin","focusControl":"true","editWin":"true","resizable":"true","width":"580","iconCls":"table_add_icon","title":"新建表","height":"500","maximizable":"true"},"expanded":false,"children":[{"configs":{"itemId":"dockedItems"},"expanded":true,"children":[{"configs":{"itemId":"toolbar1"},"expanded":true,"children":[{"configs":{"itemId":"tableNameLbl","text":"表名："},"expanded":true,"children":[],"type":"item"},{"configs":{"itemId":"tableName","allowBlank":"false","flex":"1","width":"200"},"expanded":false,"children":[],"type":"text"}],"type":"toolbar"},{"configs":{"itemId":"toolbar2"},"expanded":true,"children":[{"configs":{"itemId":"addBtn","text":"添加字段","iconCls":"db_field_add_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.add(app.addTableGrid, {}, 'after', -1, false);"}},{"configs":{"itemId":"delBtn","text":"删除字段","iconCls":"db_field_delete_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.remove(app.addTableGrid);"}}],"type":"toolbar"}],"type":"array"},{"configs":{"itemId":"addTableGrid","submitSelect":"false","editable":"true","pagingBar":"false","viewConfig":"{\n  markDirty: false,\n  plugins: {\n    ptype: 'gridviewdragdrop',\n    ddGroup: 'tableEditCard'\n  },\n  listeners: {\n    drop: function() {\n      Wb.refreshRowNum(this.ownerCt);\n    }\n  }\n}"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['NAME', 'TYPE', 'IS_NULL']","url":"m?xwl=dev/datainfo/SQL/dbm/select-object"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"numCol","xtype":"rownumberer"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"nameCol","dataIndex":"NAME","flex":"1","text":"字段名称"},"expanded":true,"children":[{"configs":{"itemId":"editor","allowBlank":"false"},"expanded":false,"children":[],"type":"text"}],"type":"column"},{"configs":{"itemId":"typeCol","dataIndex":"TYPE","flex":"1","text":"类型"},"expanded":true,"children":[{"configs":{"itemId":"editor","allowBlank":"false","queryMode":"local","displayField":"type","store":"app.fieldTypeStore"},"expanded":false,"children":[],"type":"combo","events":{"select":"combo.focus(false, true, function() {\n  var pos = combo.getValue().indexOf('(');\n  if (pos != -1) {\n    pos++;\n    combo.selectText(pos, pos);\n  }\n});"}}],"type":"column"},{"configs":{"itemId":"isNullCol","xtype":"checkcolumn","dataIndex":"IS_NULL","width":"80","text":"允许空"},"expanded":false,"children":[],"type":"column"}],"type":"array"}],"type":"grid"}],"type":"window","events":{"show":"Wb.setTitle(win, app.basicParams.jndi);\napp.addTableGrid.store.removeAll();\napp.loadFieldTypeStore();","ok":"if (!app.addTableGrid.store.getCount()) {\n  Wb.warn('字段未定义，请添加字段列表。');\n  return;\n}\nif (!Wb.verifyGrid(app.addTableGrid))\n  return;\nvar sql, node = app.selNode,\n  isFirst = true,\n  params = Wb.apply(Wb.getValue(win), app.basicParams);\n\nif (params.dbType == 'mysql')\n  params.tableName = params.tableName.toLowerCase(); //MySQL表名强制使用小写\nsql = 'CREATE TABLE ' + params.prefix + '.' + params.quoteChar + params.tableName + params.quoteChar + '(\\n';\napp.addTableGrid.store.each(function(rec) {\n  if (isFirst)\n    isFirst = false;\n  else\n    sql += ',\\n';\n  sql += params.quoteChar + rec.data.NAME + params.quoteChar + ' ' + rec.data.TYPE + (rec.data.IS_NULL ? '' : ' NOT NULL');\n});\nsql += '\\n)';\nWb.request({\n  url: 'm?xwl=dev/datainfo/SQL/dbm/create-object',\n  params: {\n    script: sql,\n    jndi: params.jndi\n  },\n  success: function() {\n    Wb.loadSelect(node, {\n      iconCls: 'table_icon',\n      text: params.tableName,\n      table: params.tableName,\n      subType: 'tableSub',\n      type: 'table'\n    }, function() {\n      app.sortHandler(node);\n    });\n    win.close();\n  }\n});"}},{"configs":{"layout":"fit","itemId":"addIndexWin","focusControl":"true","editWin":"true","resizable":"true","width":"580","iconCls":"sort_by_name_icon","title":"新建索引","height":"500","maximizable":"true"},"expanded":false,"children":[{"configs":{"isConfig":"true","itemId":"tbar"},"expanded":true,"children":[{"configs":{"itemId":"indexNameLbl","text":"索引名："},"expanded":true,"children":[],"type":"item"},{"configs":{"itemId":"indexName","allowBlank":"false","flex":"1","width":"200"},"expanded":false,"children":[],"type":"text"}],"type":"toolbar"},{"configs":{"itemId":"fieldsGrid","selType":"checkboxmodel","editable":"true","simpleSelect":"true","pagingBar":"false","viewConfig":"{\n  plugins: {\n    ptype: 'gridviewdragdrop',\n    ddGroup: 'tableEditCard'\n  },\n  listeners: {\n    drop: function() {\n      Wb.refreshRowNum(this.ownerCt);\n    }\n  }\n}","title":"索引组成字段选择","iconCls":"db_field_icon"},"expanded":true,"children":[{"configs":{"itemId":"store","normalName":"indexFieldsStore","url":"m?xwl=sys/tool/db/get-fields"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"numCol","xtype":"rownumberer"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"nameCol","dataIndex":"FIELD_NAME","flex":"1","text":"字段名称"},"expanded":true,"children":[],"type":"column"}],"type":"array"},{"configs":{"isConfig":"true","itemId":"bbar"},"expanded":true,"children":[{"configs":{"itemId":"uniqueIndex","boxLabel":"唯一索引"},"expanded":false,"children":[],"type":"check"},{"configs":{"itemId":"item1","xtype":"tbspacer","width":"50"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"primaryKey","boxLabel":"主键"},"expanded":false,"children":[],"type":"check"}],"type":"toolbar"}],"type":"grid"}],"type":"window","events":{"show":"Wb.setTitle(win, app.basicParams.table);","ok":"var script, fields, iconCls, dbType,\n  indexName = app.indexName.getValue(),\n  node = app.selNode,\n  quoteChar = app.basicParams.quoteChar,\n  fullTableName = app.basicParams.fullTableName,\n  sels = app.fieldsGrid.getSelection();\nif (!sels.length) {\n  Wb.warn('请选择索引的组成字段。');\n  return;\n}\nfields = '(' + quoteChar + Wb.pluck(sels, 'FIELD_NAME').join(quoteChar + ',' + quoteChar) + quoteChar + ')';\nif (app.primaryKey.getValue())\n  script = 'alter table ' + fullTableName + ' ADD CONSTRAINT ' + quoteChar + indexName + quoteChar + ' PRIMARY KEY ' + fields;\nelse\n  script = 'create ' + (app.uniqueIndex.getValue() ? 'unique ' : '') + 'index ' + quoteChar + indexName + quoteChar + ' on ' +\n  fullTableName + fields;\nif (app.primaryKey.getValue())\n  iconCls = 'key_icon';\nelse if (app.uniqueIndex.getValue())\n  iconCls = 'star_icon';\nelse\n  iconCls = 'sort_by_name_icon';\nWb.request({\n  url: 'm?xwl=dev/datainfo/SQL/dbm/create-object',\n  params: {\n    script: script,\n    jndi: app.basicParams.jndi\n  },\n  success: function() {\n    Wb.loadSelect(node, {\n      iconCls: iconCls,\n      text: indexName,\n      idx: indexName,\n      leaf: true,\n      type: 'idx'\n    }, function() {\n      app.sortHandler(node);\n    });\n    win.close();\n  }\n});"}},{"configs":{"layout":"fit","itemId":"addScriptWin","focusControl":"true","editWin":"true","resizable":"true","maximized":"true","width":"580","title":"新建","height":"500","maximizable":"true"},"expanded":false,"children":[{"configs":{"isConfig":"true","itemId":"tbar"},"expanded":true,"children":[{"configs":{"itemId":"nameLbl","text":"名称："},"expanded":true,"children":[],"type":"item"},{"configs":{"itemId":"addScriptNameEdit","allowBlank":"false","flex":"1","width":"200"},"expanded":false,"children":[],"type":"text"}],"type":"toolbar"},{"configs":{"itemId":"sqlEditor","split":"true","html":"<textarea><\/textarea>","region":"north","height":"120"},"expanded":false,"children":[],"type":"container","events":{"afterrender":"container.ownerCt.editor = container.editor = CodeMirror.fromTextArea(container.el.down('textarea', true), {\n  lineNumbers: true,\n  mode: 'text/x-sql',\n  theme: Wb.editTheme,\n  matchBrackets: true,\n  extraKeys: {\n    'Ctrl-Enter': function() {\n      app.runSql();\n    },\n    'Shift-Ctrl-F': function(doc) {\n      app.formatScript(doc);\n    },\n    'Alt-/': 'autocomplete',\n    '.': function(doc) {\n      doc.replaceSelection('.');\n      if (doc.hintTimer)\n        clearTimeout(doc.hintTimer);\n      doc.hintTimer = setTimeout(function() {\n        CodeMirror.showHint(doc);\n      }, 100);\n    }\n  }\n});","resize":"if (container.editor && !container.destroying) {\n  Ext.fly(container.editor.getScrollerElement()).setHeight(height);\n  container.editor.refresh();\n}"}}],"type":"window","events":{"ok":"var script = win.editor.getValue(),\n  name = app.addScriptNameEdit.getValue(),\n  fullName;\n\nif (!script) {\n  Wb.warn('请输入创建对象的SQL语句。');\n  return;\n}\nif (app.selData.subType == 'view' && app.basicParams.dbType == 'mysql')\n  name = name.toLowerCase(); //MySQL视图名称强制使用小写\nfullName = app.basicParams.prefix + '.' + app.basicParams.quoteChar + name + app.basicParams.quoteChar;\nWb.request({\n  url: 'm?xwl=dev/datainfo/SQL/dbm/create-object',\n  params: {\n    script: script,\n    jndi: app.basicParams.jndi,\n    objectName: fullName\n  },\n  success: function() {\n    var type = app.selData.subType,\n      node = app.selNode,\n      nodeData = {\n        iconCls: win.iconCls,\n        text: name,\n        type: type,\n        leaf: true\n      };\n    nodeData[type] = name;\n    Wb.loadSelect(node, nodeData, function() {\n      app.sortHandler(node);\n    });\n    win.close();\n  }\n});"}},{"configs":{"itemId":"addFieldWin","focusControl":"true","editWin":"true","width":"412","layoutType":"anchorForm","iconCls":"db_field_icon","title":"新建字段"},"expanded":false,"children":[{"configs":{"itemId":"fieldName","allowBlank":"false","labelAlign":"right","fieldLabel":"字段名称"},"expanded":false,"children":[],"type":"text"},{"configs":{"itemId":"fieldType","allowBlank":"false","queryMode":"local","labelAlign":"right","fieldLabel":"字段类型","displayField":"type","store":"app.fieldTypeStore"},"expanded":false,"children":[],"type":"combo","events":{"select":"combo.focus(false, true, function() {\n  var pos = combo.getValue().indexOf('(');\n  if (pos != -1) {\n    pos++;\n    combo.selectText(pos, pos);\n  }\n});"}},{"configs":{"itemId":"defaultValue","labelAlign":"right","fieldLabel":"默认值"},"expanded":false,"children":[],"type":"text"},{"configs":{"itemId":"allowNull","boxLabel":"允许空","labelAlign":"right","hideEmptyLabel":"false"},"expanded":false,"children":[],"type":"check"}],"type":"window","events":{"show":"Wb.setTitle(win, app.basicParams.table);\napp.loadFieldTypeStore();","ok":"var sql, node = app.selNode,\n  dbType = app.basicParams.dbType,\n  quoteFieldName,\n  fullTableName = app.basicParams.fullTableName,\n  params = Wb.getValue(win);\n\nif (params.defaultValue) {\n  if (params.fieldType.toLowerCase().indexOf('char') != -1)\n    params.defaultValue = \"'\" + params.defaultValue + \"'\";\n  params.defaultValue = ' default ' + params.defaultValue;\n}\nif (params.allowNull)\n  params.allowNull = '';\nelse\n  params.allowNull = ' not null';\nquoteFieldName = app.basicParams.quoteChar + params.fieldName + app.basicParams.quoteChar;\nif (dbType == 'oracle')\n  sql = Wb.format('alter table {0} add ({1} {2}{3}{4})', fullTableName, quoteFieldName,\n    params.fieldType, params.defaultValue, params.allowNull);\nelse\n  sql = Wb.format('alter table {0} add {1} {2}{3}{4}', fullTableName, quoteFieldName,\n    params.fieldType, params.allowNull, params.defaultValue);\nWb.request({\n  url: 'm?xwl=dev/datainfo/SQL/dbm/create-object',\n  params: {\n    script: sql,\n    jndi: app.basicParams.jndi\n  },\n  success: function() {\n    Wb.loadSelect(node, {\n      iconCls: 'db_field_icon',\n      text: params.fieldName,\n      field: params.fieldName,\n      leaf: true,\n      type: 'field'\n    });\n    win.close();\n  }\n});"}},{"configs":{"itemId":"permWin","dialog":"true","resizable":"true","width":"530","layoutType":"anchorForm","title":"权限设置","iconCls":"option_icon","maximizable":"true"},"expanded":false,"children":[{"configs":{"layout":"hbox","itemId":"container1"},"expanded":true,"children":[{"configs":{"itemId":"permx1","onTriggerClick":"app.selectRole(this);","labelAlign":"right","editable":"false","flex":"1","triggerCls":"x-form-ellipsis-trigger","fieldLabel":"查询"},"expanded":false,"children":[],"type":"combo"},{"configs":{"itemId":"permx1Del","tooltip":"删除","iconCls":"delete_icon"},"expanded":false,"children":[],"type":"button","events":{"click":"app.removeRole(app.permx1);"}}],"type":"container"},{"configs":{"layout":"hbox","itemId":"container2"},"expanded":true,"children":[{"configs":{"itemId":"permx2","onTriggerClick":"app.selectRole(this);","labelAlign":"right","editable":"false","flex":"1","triggerCls":"x-form-ellipsis-trigger","fieldLabel":"修改数据"},"expanded":false,"children":[],"type":"combo"},{"configs":{"itemId":"permx2Del","tooltip":"删除","iconCls":"delete_icon"},"expanded":false,"children":[],"type":"button","events":{"click":"app.removeRole(app.permx2);"}}],"type":"container"},{"configs":{"layout":"hbox","itemId":"container3"},"expanded":true,"children":[{"configs":{"itemId":"permx3","onTriggerClick":"app.selectRole(this);","labelAlign":"right","editable":"false","flex":"1","triggerCls":"x-form-ellipsis-trigger","fieldLabel":"修改结构"},"expanded":false,"children":[],"type":"combo"},{"configs":{"itemId":"permx3Del","tooltip":"删除","iconCls":"delete_icon"},"expanded":false,"children":[],"type":"button","events":{"click":"app.removeRole(app.permx3);"}}],"type":"container"}],"type":"window","events":{"hide":" app.permx2.setDisabled(false);\n app.permx2Del.setDisabled(false);\n app.permx3.setDisabled(false);\n app.permx3Del.setDisabled(false);","ok":"Wb.request({\n  url: 'm?xwl=dev/datainfo/SQL/dbm/set-roles',\n  params: Wb.apply({\n    permx1: app.permx1.roleName,\n    permx2: app.permx2.roleName,\n    permx3: app.permx3.roleName\n  }, app.basicParams),\n  success: function(resp) {\n    win.close();\n  }\n});"}},{"configs":{"layout":"@{type:'vbox', align:'stretch'}","itemId":"propertyWin","createInstance":"false","closeAction":"destroy","width":"650","bodyPadding":"8 8 0 8","title":"属性","autoShow":"true","iconCls":"property_icon","modal":"true","height":"450","maximizable":"true"},"expanded":false,"children":[{"configs":{"itemId":"tableNameText","padding":"2","labelAlign":"right","fieldLabel":"对象名","labelWidth":"80","readOnly":"true","selectOnFocus":"true"},"expanded":false,"children":[],"type":"text"},{"configs":{"itemId":"fieldsText","padding":"2","labelAlign":"right","fieldLabel":"字段列表","labelWidth":"80","readOnly":"true"},"expanded":false,"children":[],"type":"text"},{"configs":{"layout":"fit","itemId":"fieldset1","padding":"8","flex":"1","title":"字段属性"},"expanded":true,"children":[{"configs":{"itemId":"grid1","pagingBar":"false"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['dataIndex', 'metaType', 'metaSize', 'metaScale', 'metaRequired']"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"viewConfig","enableTextSelection":"true"},"expanded":false,"children":[],"type":"tableview"},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"noCol","xtype":"rownumberer","width":"30"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"nameCol","renderer":"if (record.get('metaRequired'))\n  return '<b>' + value + '<\/b>';\nelse return value;","dataIndex":"dataIndex","flex":"1","text":"字段名称"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"typeCol","dataIndex":"metaType","text":"类型"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"sizeCol","dataIndex":"metaSize","text":"大小","align":"right"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"scaleCol","dataIndex":"metaScale","width":"70","text":"精度","align":"right"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"requiredCol","xtype":"booleancolumn","dataIndex":"metaRequired","trueText":"是","width":"70","text":"必填","falseText":"否"},"expanded":false,"children":[],"type":"column"}],"type":"array"}],"type":"grid"}],"type":"fieldset"}],"type":"window"},{"configs":{"layout":"border","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"itemId":"mainBar","enableOverflow":"true","region":"north"},"expanded":true,"children":[{"configs":{"itemId":"addItem","handler":"app.addObject","tooltip":"在当前上下文中添加新的对象","text":"添加","iconCls":"db_field_add_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"editItem","handler":"app.editObject","tooltip":"在当前上下文中修改选择的对象","text":"修改","iconCls":"db_field_edit_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"removeItem","handler":"app.removeObject","tooltip":"在当前上下文中删除选择的对象","text":"删除","iconCls":"db_field_delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"openItem","handler":"app.openObject","tooltip":"打开或运行选择的对象","text":"打开","iconCls":"action_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"permItem","handler":"app.setPerm","overflowText":"权限","tooltip":"对选择的对象访问权限进行设置","text":"权限","iconCls":"option_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"item1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"newSqlItem","tooltip":"添加当前数据库新的SQL页","text":"新建SQL","iconCls":"sql_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.addSqlCard(app.basicParams.jndi);"}},{"configs":{"itemId":"runSqlItem","overflowText":"运行SQL","tooltip":"运行当前选择的SQL (Ctrl+Enter)","text":"运行SQL","iconCls":"run_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.runSql();"}},{"configs":{"itemId":"item2","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"addRecordItem","handler":"app.addRecord","overflowText":"添加记录","tooltip":"为当前表格添加新的记录 (Ctrl+E)","iconCls":"record_add_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"delRecordItem","handler":"app.delRecord","overflowText":"删除记录","tooltip":"删除当前表格选择的记录 (Ctrl+D)","iconCls":"record_delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"rejectItem","handler":"app.reject","overflowText":"撤消修改","tooltip":"撤消对表格未保存的修改","iconCls":"undo_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"item3","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"saveItem","overflowText":"保存","tooltip":"保存当前修改的对象 (Ctrl+S)","iconCls":"save_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.save();"}},{"configs":{"itemId":"saveAllItem","overflowText":"保存全部","tooltip":"保存全部修改的对象 (Ctrl+Shift+S)","iconCls":"save_all_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.save(true);"}},{"configs":{"itemId":"item4","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"propertyItem","overflowText":"属性","tooltip":"显示当前页面字段详细信息","iconCls":"property_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.tab.activeTab;\nif (card.store.proxy.reader.rawData) {\n  var win = new Ext.window.Window(app._propertyWin),\n    grid = win.down('#grid1'),\n    cols = card.store.proxy.reader.rawData.columns;\n  grid.store.loadData(cols);\n  grid.store.removeAt(0);\n  app.tableNameText.setValue(card.objectName ? (card.prefix + '.' + card.objectName) : '(SQL)');\n  app.fieldsText.setValue(Ext.Array.pluck(cols, 'dataIndex').join(', ').substring(2));\n} else\n  Wb.warn('表格无数据。');"}},{"configs":{"itemId":"filterItem","xtype":"splitbutton","overflowText":"过滤","tooltip":"按指定条件对表格进行筛选","iconCls":"filter_icon"},"expanded":true,"children":[{"configs":{"itemId":"resetFilterItem","tooltip":"重置表格设置的过滤条件","text":"重置过滤"},"expanded":false,"children":[],"type":"item","events":{"click":"var card = app.tab.activeTab;\nif (card.originSql && card.originSql != card.sql) {\n  card.sql = card.originSql;\n  card.store.load({\n    params: {\n      jndi: card.jndi,\n      sql: card.sql\n    }\n  });\n}"}}],"type":"item","events":{"click":"var card = app.tab.activeTab;\nWb.promptText('添加过滤条件表达式', function(value, win) {\n  if (!card.originSql)\n    card.originSql = card.sql;\n  if (value) {\n    card.filterCondi = value;\n    card.sql = card.originSql + ' where ' + value;\n  } else card.sql = card.originSql;\n  card.store.load({\n    params: {\n      jndi: card.jndi,\n      sql: card.sql\n    },\n    callback: function(a, b, succ) {\n      delete card.store.lastOptions.callback; //防止store.reload时再调用该回调函数\n      if (succ)\n        win.close();\n    }\n  });\n}, {\n  iconCls: 'filter_icon',\n  value: card.filterCondi\n});"}},{"configs":{"itemId":"item5","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"exportItem","overflowText":"导出","tooltip":"把当前内容导出到客户端","iconCls":"db_export_icon"},"expanded":true,"children":[],"type":"item","events":{"click":"var card = app.tab.activeTab,\n  store = card.store;\nif (store.getTotalCount() > store.getCount() || card.hasBlob) {\n  //从服务器端取数\n  Wb.download('m?xwl=sys/tool/db/export', {\n    sql: card.sql,\n    jndi: card.jndi,\n    filename: card.objectName ? card.objectName + '.gz' : 'data.gz'\n  });\n} else {\n  //从客户端取数\n  var rows = [];\n  store.each(function(rec) {\n    rows.push(Wb.encode(rec.data));\n  });\n  Wb.download('get-file', {\n    data: rows.join('\\n'),\n    gzip: true,\n    filename: card.objectName ? card.objectName + '.gz' : 'data.gz'\n  }, true);\n}"}},{"configs":{"itemId":"importItem","overflowText":"导入","tooltip":"把客户端文件内容导入到当前对象","iconCls":"db_import_icon"},"expanded":true,"children":[],"type":"item","events":{"click":"var card = app.tab.activeTab;\nWb.run({\n  url: 'upload-dialog',\n  single: true,\n  success: function(app) {\n    app.upload({\n      url: 'm?xwl=sys/tool/db/import',\n      iconCls: 'import_icon',\n      title: '导入 - ' + card.tableName,\n      showProgress: false,\n      params: {\n        jndi: card.jndi,\n        table: Wb.addPrefix(card.schema, card.tableName)\n      },\n      beforeUpload: function() {\n        var ext = app.file.getValue().toLowerCase(),\n          endsWith = Ext.String.endsWith;\n        if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\n          !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\n          Wb.warn('请选择一个gz、txt或Excel格式的文件。');\n          return false;\n        }\n      },\n      success: function() {\n        card.store.reload();\n      }\n    });\n    app.form1.add({\n      xtype: 'checkbox',\n      boxLabel: '导入过程使用事务',\n      hideEmptyLabel: false,\n      checked: true,\n      itemId: 'trans',\n      x: 92,\n      y: 56\n    });\n    //在窗口隐藏时还原\n    app.win.mon(app.win, {\n      hide: {\n        single: true,\n        fn: function(me) {\n          app.form1.down('#trans').destroy();\n        }\n      }\n    });\n  }\n});"}},{"configs":{"itemId":"item6","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"backItem","overflowText":"后退","tooltip":"转到上一个页面 (Ctrl+1)","iconCls":"left_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"forwardItem","overflowText":"前进","tooltip":"转到后退前的页面 (Ctrl+2)","iconCls":"right_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"autoWidthItem","overflowText":"自动宽度","tooltip":"自动调整当前表格的列宽度","iconCls":"table_align_columns_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var grid = app.tab.activeTab.grid;\nif (grid && grid.columns) {\n  Ext.suspendLayouts();\n  var col, cols = grid.columns,\n    i, j = cols.length;\n  for (i = 1; i < j; i++) {\n    col = grid.columns[i];\n    if (cols[i].autoSize)\n      cols[i].autoSize();\n    //基于Neptune的系列主题同其他主题存在字体大小差异，进行微调\n    col.setWidth(col.width + (Wb.isNeptune ? 15 : 10));\n  }\n  Ext.resumeLayouts(true);\n}"}},{"configs":{"itemId":"item7","text":"->"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"useDictItem","text":"使用字典","iconCls":"book_icon","enableToggle":"true"},"expanded":false,"children":[],"type":"item"}],"type":"toolbar"},{"configs":{"itemId":"dbTree","split":"true","width":"280","cls":"x-autowidth-table","region":"west","title":"对象资源管理器","tools":"Wb.getTreeTools({expand:false,collapse:false})","collapsible":"true","rootVisible":"false","hideHeaders":"true"},"expanded":true,"children":[{"configs":{"itemId":"store","showMask":"true","normalName":"treeStore","root":"{\n  subType: 'db'\n}","fields":"['type', 'subType', 'COMMENTS', 'prefix', 'text', 'jndi', 'table', 'field', 'idx', 'iconCls', 'view', 'sp', 'fn', 'tr']","url":"m?xwl=dev/datainfo/SQL/dbm/select-object"},"expanded":false,"children":[],"type":"treestore","events":{"load":"Wb.selFirst(store);","beforeload":"Wb.apply(operation.params, app.getBasicParams(operation.node));"}},{"configs":{"itemId":"popupMenu","minWidth":"150"},"expanded":true,"children":[],"type":"menu","events":{"afterrender":"Wb.cloneMenu(menu, ['openItem', '-', 'addItem', 'editItem', 'removeItem']);\nmenu.getComponent('addItem-clone').setText('添加...');\nmenu.getComponent('editItem-clone').setText('修改...');\nmenu.add(['-', {\n  text: '复制',\n  itemId: 'copyObjectItem',\n  iconCls: 'copy_icon',\n  handler: app.copyHandler\n}, {\n  text: '粘贴...',\n  itemId: 'pasteObjectItem',\n  iconCls: 'paste_icon',\n  handler: app.pasteHandler\n}]);\nmenu.insert(1, {\n  text: 'SQL打开',\n  itemId: 'sqlOpenItem',\n  iconCls: 'sql_icon',\n  handler: function() {\n    app.addSqlCard(app.basicParams.jndi);\n    var editor = app.tab.activeTab.editor;\n    editor.setValue('select * from ' +\n      Wb.replaceAll(app.basicParams.type == 'table' ? app.basicParams.fullTableName : app.basicParams.fullViewName, app.basicParams.quoteChar, ''));\n    app.runSql();\n    editor.focus();\n  }\n});","show":"menu.getComponent('copyObjectItem').setDisabled(app.selData.type != 'table');\nmenu.getComponent('pasteObjectItem').setDisabled(!app.copiedObject || app.selData.subType != 'table' && app.selData.type != 'table');\nmenu.getComponent('sqlOpenItem').setDisabled(app.selData.type != 'table' && app.selData.type != 'view');"}},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"column1","renderer":"var comm, title = record.data.title;\nvalue = Wb.encodeHtml(value);\ncomm = record.data.COMMENTS;\nif (comm && comm.toLowerCase() != 'view')\n  return value + '&nbsp;&nbsp;<span style=\"color:#999;\">' + Wb.encodeHtml(record.data.COMMENTS) + '<\/span>';\nelse return value;","xtype":"treecolumn","dataIndex":"text","width":"10000"},"expanded":false,"children":[],"type":"column"}],"type":"array"}],"type":"tree","events":{"itemclick":"if (e.ctrlKey) {\n  var card;\n  if (record.data.type == 'db') {\n    card = app.tab.child('[sqlEditor=true][jndi=' + record.data.jndi + ']');\n    if (card)\n      app.tab.setActiveTab(card);\n    else\n      app.addSqlCard(record.data.jndi);\n  } else {\n    card = app.tab.activeTab;\n    if (card && card.editor) {\n      card.editor.replaceSelection(record.data.text);\n      setTimeout(function() {\n        card.editor.focus();\n      }, 20);\n    }\n  }\n}","selectionchange":"app.selNodes = selected;\nvar selNode = app.selNode = selected[0];\napp.selData = selNode ? selNode.data : null;\napp.basicParams = selNode ? app.getBasicParams(selNode) : null;\napp.setObjectButtons();"}},{"configs":{"itemId":"tab","plugins":"['tabreorderer', 'tabclosemenu']","region":"center"},"expanded":true,"children":[],"type":"tab","events":{"tabchange":"app.setButtons();","remove":"component.grid = null;\napp.setButtons();"}},{"configs":{"itemId":"uploadForm","hidden":"true"},"expanded":true,"children":[{"configs":{"itemId":"file"},"expanded":false,"children":[],"type":"file","events":{"change":"if (newValue) {\n  var rec = app.uploadRec;\n  Wb.upload({\n    form: app.uploadForm,\n    showProgress: true,\n    url: 'm?xwl=sys/tool/db/upload-blob',\n    params: Ext.apply({\n      __jndi: app.uploadCard.jndi,\n      __tableName: app.uploadCard.tableName,\n      __fieldName: app.uploadFieldName\n    }, Wb.getData(rec, true)),\n    callback: function() {\n      Wb.reset(app.uploadForm);\n    },\n    success: function(form, action, value) {\n      rec.set(app.uploadFieldName, 'blob');\n      rec.commit();\n    }\n  });\n}"}}],"type":"form"}],"type":"viewport","events":{"afterrender":"app.navKey = new Ext.KeyNav({\n  viewport: app.viewport1,\n  E: {\n    ctrl: true,\n    fn: app.addRecord\n  },\n  D: {\n    ctrl: true,\n    fn: app.delRecord\n  },\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      app.save(e.shiftKey);\n    }\n  },\n  1: {\n    ctrl: true,\n    fn: function() {\n      app.backItem.fireEvent('click', app.backItem);\n    }\n  },\n  2: {\n    ctrl: true,\n    fn: function() {\n      app.forwardItem.fireEvent('click', app.forwardItem);\n    }\n  }\n});\nWb.setNavigate(app.tab, app.backItem, app.forwardItem);\napp.setButtons();"}}],"type":"module","events":{"beforeunload":"var title = Wb.getModifiedTitle(app.tab, true);\nif (title !== null)\n  return '表' + title + '已经被修改。';","initialize":"Wb.apply(app, {\n  /**\n   * 对象图标类型定义。\n   */\n  objectIconCls: {\n    table: 'table_icon',\n    view: 'view_icon',\n    sp: 'sp_icon',\n    fn: 'file_ss_icon',\n    tr: 'execute_icon',\n    idx: 'sort_by_name_icon'\n  },\n  /**\n   * 在当前上下文中添加新的对象。\n   */\n  addObject: function() {\n    switch (app.selData.subType) {\n      case 'table':\n        app.addTableWin.show();\n        break;\n      case 'idx':\n        app.addIndexWin.show();\n        app.indexFieldsStore.removeAll();\n        app.indexFieldsStore.load({\n          params: {\n            table: app.basicParams.fullTableName,\n            jndi: app.basicParams.jndi\n          }\n        });\n        break;\n      case 'field':\n        app.addFieldWin.show();\n        break;\n      default:\n        app.scriptAddHandler();\n    }\n  },\n  /**\n   * 在当前上下文中修改选择的对象。\n   */\n  editObject: function() {\n    var found, params = app.basicParams;\n    app.tab.items.each(function(card) {\n      if (card.jndi == params.jndi && card.prefix == params.prefix && card.type == params.type && card.objectName == app.selData.text) {\n        app.tab.setActiveTab(card);\n        found = true;\n        return false;\n      }\n    });\n    if (found)\n      return;\n    Wb.request({\n      url: 'm?xwl=dev/datainfo/SQL/dbm/select-object',\n      params: Wb.applyIf({\n        subType: params.type + 'Edit'\n      }, params),\n      success: function(resp) {\n        var card, config;\n        config = app._scriptEditCard;\n        config = Wb.applyIf({\n          itemId: Wb.getId(),\n          type: params.type,\n          objectName: app.selData.text,\n          prefix: params.prefix,\n          basicParams: params,\n          jndi: params.jndi,\n          iconCls: app.objectIconCls[params.type],\n          tabConfig: {\n            tooltip: params.prefix + '.' + app.selData.text + ' - ' + params.jndi\n          },\n          title: '修改 - ' + app.selData.text\n        }, config);\n        card = app.tab.add(config);\n        app.tab.setActiveTab(card);\n        Sql.autoComplete(card.editor);\n        card.loadProperties(Wb.decode(resp.responseText));\n      }\n    });\n  },\n  /**\n   * 在当前上下文中删除选择的对象。\n   */\n  removeObject: function() {\n    Wb.confirmDo(app.selNodes, function() {\n      Wb.request({\n        url: 'm?xwl=dev/datainfo/SQL/dbm/remove-object',\n        params: app.basicParams,\n        success: function(resp) {\n          Wb.remove(app.dbTree);\n        }\n      });\n    }, 'text');\n  },\n  /**\n   * 在当前上下文中打开选择的对象。\n   */\n  openObject: function() {\n    app[app.selData.type + 'OpenHandler']();\n  },\n  /**\n   * 获得指定节点及其上级节点的基本参数。\n   * @param {NodeInterface} node 节点对象。\n   * @return {Object} 参数对象。\n   */\n  getBasicParams: function(node) {\n    var param, quoteChar, params = {},\n      fields = app.treeStore.fields,\n      nodes = [];\n\n    node.bubble(function(n) {\n      nodes.push(n);\n    });\n    Wb.each(nodes, function(n) {\n      Wb.each(fields, function(field) {\n        param = n.data[field];\n        if (param)\n          params[field] = param;\n      });\n    }, true);\n    tag = app.getTag(node);\n    params.dbType = tag.db;\n    if (tag.db == 'mysql')\n      params.quoteChar = '`';\n    else\n      params.quoteChar = '\"';\n    quoteChar = params.quoteChar;\n    params.fullTableName = params.prefix + '.' + quoteChar + params.table + quoteChar;\n    params.fullViewName = params.prefix + '.' + quoteChar + params.view + quoteChar;\n    params.fullSpName = params.prefix + '.' + quoteChar + params.sp + quoteChar;\n    params.fullFnName = params.prefix + '.' + quoteChar + params.fn + quoteChar;\n    params.fullTrName = params.prefix + '.' + quoteChar + params.tr + quoteChar;\n    if (tag.db == 'oracle')\n      params.fullIdxName = params.prefix + '.' + quoteChar + params.idx + quoteChar;\n    else\n      params.fullIdxName = quoteChar + params.idx + quoteChar;\n    params.fullFieldName = quoteChar + params.field + quoteChar;\n    return params;\n  },\n  /**\n   * 创建新的SQL页，如果指定SQL，将立即运行SQL语句。\n   * @param {String} jndi JNDI名称。\n   * @param {String} sql 运行的SQL语句。\n   * @param {Boolean} sqlEditor 是否显示SQL编辑器。\n   * @param {Boolean} realEditable 表格是否可以编辑。\n   * @param {String} iconCls tab页的图标。\n   * @param {String} title tab页的标题。\n   * @param {String} tableName 表名。如果不是表可以缺省此项值。\n   * @param {String} tooltip 标签的提示文本。\n   * @param {String} objectName 对象名称。\n   * @param {String} prefix 前缀。\n   * @return {Panel} 新添加的SQL页。\n   */\n  newSqlCard: function(jndi, sql, sqlEditor, realEditable, iconCls, title, tableName, tooltip, objectName, prefix) {\n    var card, config;\n    config = Wb.applyIf({\n      jndi: jndi,\n      sql: sql,\n      editable: true,\n      iconCls: iconCls,\n      sqlEditor: sqlEditor,\n      title: title,\n      tableName: tableName,\n      objectName: objectName,\n      prefix: prefix,\n      itemId: Wb.getId(),\n      tabConfig: tooltip ? {\n        tooltip: tooltip\n      } : null\n    }, Ext.clone(sqlEditor ? app._sqlCard : app._sqlGrid));\n    if (!sqlEditor)\n      config.store.remoteSort = true;\n    config.realEditable = realEditable;\n    if (realEditable) {\n      config.save = app.saveGrid;\n      Wb.apply(config, {\n        downloadBlob: app.downloadBlob,\n        uploadBlob: app.uploadBlob,\n        removeBlob: app.removeBlob\n      });\n    }\n    card = app.tab.add(config);\n    app.tab.setActiveTab(card);\n    if (objectName)\n      card.exportFilename = objectName;\n    return card;\n  },\n  /**\n   * 添加包含自动标题的SQL页。\n   * @param {String} jndi jndi名称。\n   * @return {type} 返回值说明。\n   */\n  addSqlCard: function(jndi) {\n    var tab;\n    if (!app.sqlIndex)\n      app.sqlIndex = 0;\n    app.sqlIndex++;\n    app.newSqlCard(jndi, '', true, false, 'sql_icon', 'SQL' + app.sqlIndex + ' - ' + jndi);\n    tab = app.tab.activeTab;\n    Sql.autoComplete(tab.editor);\n  },\n  /**\n   * 表打开处理方法。\n   */\n  tableOpenHandler: function() {\n    app.openTableLike('table', 'table_icon', true);\n  },\n  /**\n   * 视图打开处理方法。\n   */\n  viewOpenHandler: function() {\n    app.openTableLike('view', 'view_icon', false);\n  },\n  /**\n   * 表视图类打开处理方法。\n   */\n  openTableLike: function(type, iconCls, realEditable) {\n    var card, jndi, sql, typeValue, found;\n\n    typeValue = app.basicParams.prefix + '.' + app.basicParams.quoteChar + app.selData[type] + app.basicParams.quoteChar;\n    jndi = app.basicParams.jndi;\n    sql = 'select * from ' + typeValue;\n    app.tab.items.each(function(card) {\n      if (!card.sqlEditor && card.realEditable == realEditable && card.jndi == jndi && card.sql == sql) {\n        app.tab.setActiveTab(card);\n        found = true;\n        return false;\n      }\n    });\n\n    if (!found) {\n      card = app.newSqlCard(jndi, sql, false, realEditable, iconCls,\n        app.selData[type], type == 'table' ? typeValue : null, typeValue + ' - ' + app.basicParams.jndi,\n        app.selData[type], app.basicParams.prefix);\n      card.grid = card;\n      card.store.card = card;\n      card.store.mask = card;\n      card.store.load({\n        params: {\n          jndi: card.jndi,\n          sql: card.sql\n        }\n      });\n    }\n  },\n  /**\n   * 设置当前选择对象的权限。\n   */\n  setPerm: function() {\n    var entities = ['db', 'table', 'view', 'sp', 'tr', 'fn'],\n      type = app.basicParams.type;\n    if (Wb.indexOf(entities, type) == -1) {\n      Wb.warn('请选择一个需要设置权限的具体对象。');\n      return;\n    }\n    Wb.request({\n      url: 'm?xwl=dev/datainfo/SQL/dbm/select-roles',\n      params: app.basicParams,\n      success: function(resp) {\n        app.permWin.show();\n        if (type == 'db') {\n          app.permx2.setDisabled(true);\n          app.permx2Del.setDisabled(true);\n          app.permx3.setDisabled(true);\n          app.permx3Del.setDisabled(true);\n        }\n        Wb.setTitle(app.permWin, app.selNode.data.text);\n        var obj = Wb.decode(resp.responseText);\n        app.permx1.roleName = obj.permx1;\n        app.permx2.roleName = obj.permx2;\n        app.permx3.roleName = obj.permx3;\n        Wb.setValue(app.permWin, {\n          permx1: Wb.joinArray(obj.permx1),\n          permx2: Wb.joinArray(obj.permx2),\n          permx3: Wb.joinArray(obj.permx3)\n        });\n      }\n    });\n  },\n  /**\n   * 选择角色。\n   */\n  selectRole: function(comp) {\n    Wb.run({\n      url: 'role-selector',\n      single: true,\n      success: function(scope) {\n        scope.show(function(roleId, roleName, win) {\n          comp.roleName = roleName;\n          comp.setValue(Wb.joinArray(roleName));\n          win.close();\n        }, {\n          roleName: comp.roleName\n        });\n      }\n    });\n  },\n  /**\n   *移除角色。\n   */\n  removeRole: function(comp) {\n    comp.roleName = [];\n    comp.reset();\n  },\n  /**\n   * 运行当前SQL页的SQL语句。\n   */\n  runSql: function() {\n    var sql, grid, config, singleSql, owner, card = app.tab.activeTab;\n    sql = card.editor.getSelection();\n    if (!sql)\n      sql = card.editor.getValue();\n    sql = sql.trim();\n    card.sql = sql;\n    sql = Sql.splitSql(Sql.removeRemark(sql));\n    if (!sql)\n      return;\n    card.remove(card.down('#centerComp'));\n    singleSql = sql.length == 1;\n    if (!singleSql) {\n      owner = card.add({\n        xtype: 'tabpanel',\n        deferredRender: false,\n        closeMenu: true,\n        region: 'center',\n        itemId: 'centerComp',\n        listeners: {\n          tabchange: function(tab, newCard) {\n            tab.ownerCt.store = newCard.store;\n            tab.ownerCt.sql = newCard.sql;\n            tab.ownerCt.grid = newCard;\n          }\n        }\n      });\n    } else {\n      owner = card;\n    }\n    Wb.each(sql, function(item) {\n      item = item.trim();\n      config = Ext.clone(app._sqlGrid);\n      if (singleSql) {\n        config.itemId = 'centerComp';\n        config.closable = false;\n      } else {\n        Wb.apply(config, {\n          itemId: Wb.getId(),\n          title: Ext.String.ellipsis(item, 40),\n          tabConfig: {\n            tooltip: item\n          }\n        });\n      }\n      grid = owner.add(config);\n      grid.sql = item;\n      grid.store.mask = grid;\n      grid.store.editor = card.editor;\n      if (!singleSql)\n        owner.setActiveTab(grid);\n      grid.store.load({\n        params: {\n          jndi: card.jndi,\n          sql: item\n        }\n      });\n    });\n    if (singleSql) {\n      owner.store = grid.store;\n      owner.sql = sql[0];\n      owner.grid = grid;\n    } else\n      owner.setActiveTab(0);\n  },\n  /**\n   * 日期格式验证器。\n   */\n  dateValidator: function(value) {\n    var metaType = this.column.metaType;\n    if (metaType && metaType.toUpperCase() == 'DATE' && value.indexOf('.') != -1)\n      return Wb.format('不允许输入毫秒 \"{0}\"', value);\n    return app.checkDate.call(this, value);\n  },\n  /**\n   * 检查日期格式是否正确并返回状态或日期值。\n   * @param {String/Date} value 日期。\n   * @param {Boolean} [returnDate] 如果值为false，将返回是否为日期格式的布尔值；否则否返回日期值。\n   * @return {Boolean/String/Date} 日期或是否为日期格式的布尔值。\n   */\n  checkDate: function(value, returnDate) {\n    if (!value)\n      return returnDate ? value : true;\n    var date, time, dateFormats = Ext.form.field.Date.prototype.altFormats,\n      timeFormats = Ext.form.field.Time.prototype.altFormats;\n    if (this.category == 'time') {\n      if ((date = app.parseDate(value, timeFormats)))\n        return returnDate ? date : true;\n    } else if (this.category == 'date') {\n      if ((date = app.parseDate(value, dateFormats)))\n        return returnDate ? date : true;\n    } else {\n      var pos = value.indexOf(' ');\n      if (pos == -1) {\n        if ((date = app.parseDate(value, dateFormats)))\n          return returnDate ? date : true;\n      } else {\n        if ((date = app.parseDate(value.substring(0, pos), dateFormats)) &&\n          (time = app.parseDate(value.substring(pos + 1), timeFormats))) {\n          if (returnDate) {\n            date.setHours(time.getHours());\n            date.setMinutes(time.getMinutes());\n            date.setSeconds(time.getSeconds());\n            date.setMilliseconds(time.getMilliseconds());\n            return date;\n          } else return true;\n        }\n      }\n    }\n    return returnDate ? null : Wb.format('无效的值 \"{0}\"', value);\n  },\n  /**\n   * 设置日期句柄。\n   * @param {String/Date} date 日期值。\n   * @return {DateField} 日期控件。\n   */\n  setDate: function(date) {\n    var me = this,\n      value = app.dateRenderer.call(me, date);\n    me.setRawValue(me.valueToRaw(value));\n    return me.mixins.field.setValue.call(me, value);\n  },\n  /**\n   * 获取日期句柄。\n   * @return {String/Date} 返回日期值。\n   */\n  getDate: function() {\n    var me = this,\n      val = me.rawToValue(me.processRawValue(me.getRawValue()));\n    me.value = val;\n    return app.checkDate.call(me, val, true) || val;\n  },\n  /**\n   * 按指定的格式解析日期值。\n   * @param {String/Date} value 日期值。\n   * @param {String} formats 日期的格式。\n   * @return {Date} 日期值。\n   */\n  parseDate: function(value, formats) {\n    if (!value)\n      return null;\n    var date, formatArray = formats.split('|');\n    Wb.each(formatArray, function(item) {\n      date = Ext.Date.parse(value, item);\n      if (date)\n        return false;\n    });\n    if (date)\n      return date;\n    else\n      return null;\n  },\n  /**\n   * 比较两个日期值是否相等。\n   * @param {Date/String} date 源日期值。\n   * @param {Date/String} date 目标日期值。\n   * @return {Boolean} true相等，false不相等。\n   */\n  isEqual: function(date1, date2) {\n    if (Ext.isDate(date1) && Ext.isDate(date2))\n      return date1.getTime() === date2.getTime();\n    return !(date1 || date2);\n  },\n  /**\n   * 日期显示器，用于把指定的日期值格式化为合适的文本显示。\n   * @param {Date} date 需要显示的日期。\n   * @return {String} 格式化后的日期文本。\n   */\n  dateRenderer: function(date) {\n    var str, category = this.category;\n    if (category == 'time')\n      return Wb.format(date, 'H:i:s');\n    else if (category == 'date')\n      return Wb.format(date, 'Y-m-d');\n    else {\n      //timestamp\n      str = Wb.dateToStr(date);\n      if (Ext.String.endsWith(str, '00:00:00.000'))\n        return str.substring(0, 10);\n      else if (Ext.String.endsWith(str, '.000'))\n        return str.substring(0, 19);\n      else return str;\n    }\n  },\n  /**\n   * 表格编辑器值改变时触发的事件。\n   * @param {Field} field 编辑器对象。\n   */\n  onChange: function(field) {\n    Wb.setModified(field.up('grid'));\n    app.setButtons();\n  },\n  /**\n   * 设置工具条和菜单按钮的可用/禁用状态。\n   */\n  setButtons: function() {\n    var card = app.tab.activeTab || {};\n    app.runSqlItem.setDisabled(!card.sqlEditor);\n    app.addRecordItem.setDisabled(!card.realEditable || card.isSaving);\n    app.delRecordItem.setDisabled(!card.realEditable || card.grid && !card.grid.getSelection().length || card.isSaving);\n    app.saveItem.setDisabled(!card.isModified || card.isSaving);\n    app.saveAllItem.setDisabled(Wb.getModifiedTitle(app.tab) === null);\n    app.rejectItem.setDisabled(app.saveItem.disabled);\n    app.filterItem.setDisabled(!card.realEditable || card.isSaving);\n    app.importItem.setDisabled(app.filterItem.disabled);\n    app.exportItem.setDisabled(!card.sql);\n    app.propertyItem.setDisabled(!card.store);\n    app.autoWidthItem.setDisabled(!card.grid);\n  },\n  /**\n   * 下载blob字段的处理方法。\n   * @param {String} fieldName 字段名。\n   * @param {String} rowIndex 行索引号。\n   */\n  downloadBlob: function(fieldName, rowIndex) {\n    var grid = this;\n    Wb.download('m?xwl=sys/tool/db/download-blob', Ext.apply({\n      __jndi: grid.jndi,\n      __tableName: grid.tableName,\n      __fieldName: fieldName\n    }, Wb.getData(grid.store.getAt(rowIndex), true)));\n  },\n  /**\n   * 上传blob字段文件的处理方法。\n   * @param {String} fieldName 字段名。\n   * @param {String} rowIndex 行索引号。\n   */\n  uploadBlob: function(fieldName, rowIndex) {\n    var rec, grid = this;\n    app.uploadRec = rec = grid.store.getAt(rowIndex);\n    app.uploadCard = grid;\n    app.uploadFieldName = fieldName;\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    app.file.fileInputEl.dom.click();\n  },\n  /**\n   * 删除blob字段内容。\n   * @param {String} fieldName 字段名。\n   * @param {String} rowIndex 行索引号。\n   */\n  removeBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      rec = grid.store.getAt(rowIndex);\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    Wb.confirm('确定要删除该记录字段 \u201c' + fieldName + '\u201d 的内容吗？', function() {\n      Wb.request({\n        url: 'm?xwl=sys/tool/db/clear-blob',\n        params: Ext.apply({\n          __jndi: grid.jndi,\n          __tableName: grid.tableName,\n          __fieldName: fieldName\n        }, Wb.getData(rec, true)),\n        success: function(resp) {\n          rec.set(fieldName, '');\n          rec.commit();\n        }\n      });\n    });\n  },\n  /**\n   * 在当前表格添加新的记录。\n   */\n  addRecord: function() {\n    if (app.addRecordItem.disabled) return;\n    var card = app.tab.activeTab;\n    Wb.add(card.grid, {}, 'after', -1, false);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  /**\n   * 删除当前表格选择的记录。\n   */\n  delRecord: function() {\n    if (app.delRecordItem.disabled) return;\n    var card = app.tab.activeTab;\n    Wb.remove(card.grid);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  /**\n   * 撤消对当前表格所做的所有未提交的更改。\n   */\n  reject: function() {\n    if (app.rejectItem.disabled) return;\n    Wb.confirm('确定要撤消对表格所做的所有更改吗？', function() {\n      var card = app.tab.activeTab;\n      Wb.reject(card.grid);\n      Wb.unModified(card);\n      app.setButtons();\n    });\n  },\n  /**\n   * 保存对已经修改对象的更改。\n   * @param {Boolean} isAll 是否保存所有对象。true所有对象，false当前页对象。\n   */\n  save: function(isAll) {\n    if (isAll && app.saveAllItem.disabled || !isAll && app.saveItem.disabled)\n      return;\n    var activeCard = app.tab.activeTab;\n\n    app.tab.items.each(function(card) {\n      if (card.isModified && !card.isSaving && card.save && (isAll || activeCard == card)) {\n        card.save();\n      }\n    });\n    Ext.EventObject.stopEvent();\n  },\n  /**\n   * 表格的保存方法。\n   * @param {Function} success 保存成功之后的回调函数。\n   */\n  saveGrid: function(success) {\n    var card = this,\n      grid = card.grid,\n      store = grid.store;\n    grid.plugins[0].completeEdit();\n    if (!Wb.verifyGrid(grid))\n      return false;\n    card.isSaving = true;\n    Wb.sync({\n      store: store,\n      url: 'm?xwl=sys/tool/db/save',\n      mask: card,\n      message: '正在保存中...',\n      params: {\n        table: card.tableName,\n        jndi: card.jndi\n      },\n      callback: function(a, succ) {\n        card.isSaving = false;\n        if (succ) {\n          store.commitChanges();\n          Wb.unModified(card);\n          Ext.callback(success);\n        }\n        app.setButtons();\n      }\n    });\n    app.setButtons();\n  },\n  /**\n   * 保存修改的脚本。\n   * @param {Function} success 保存成功之后的回调函数。\n   */\n  saveScript: function(success) {\n    var card = this,\n      basicParams = card.basicParams;\n    if (basicParams.type == 'table')\n      Wb.confirm('确定要重新创建表吗？重新创建表将丢失所有记录和索引等数据。', doSave);\n    else\n      doSave();\n\n    function doSave() {\n      var params;\n      params = Wb.apply({\n        script: card.editor.getValue()\n      }, basicParams);\n      Wb.request({\n        url: 'm?xwl=dev/datainfo/SQL/dbm/edit-object',\n        params: params,\n        callback: function(a, succ) {\n          card.isSaving = false;\n          if (succ) {\n            Wb.unModified(card);\n            Ext.callback(success);\n          }\n          app.setButtons();\n        }\n      });\n    }\n  },\n  /**\n   * 拼结多行记录描述的建表SQL语句。\n   * @param {Object} data 多行记录组成对象。\n   * @return {String} 建表SQL语句。\n   */\n  createTableScript: function(data) {\n    var rows = data.rows,\n      isFirst = true,\n      script = 'CREATE TABLE ' + rows[0].tableName + ' (\\n';\n    Wb.each(rows, function(item) {\n      if (isFirst)\n        isFirst = false;\n      else script += ',\\n';\n      script += '  ' + item.NAME + ' ' + item.TYPE + (item.IS_NULL ? '' : ' NOT NULL');\n      if (item.COLUMN_DEFAULT)\n        script += ' default ' + item.COLUMN_DEFAULT;\n    });\n    script += '\\n)';\n    return script;\n  },\n  /**\n   * 设置对象增删改按钮的状态。\n   */\n  setObjectButtons: function() {\n    var data = app.selData;\n    app.addItem.setDisabled(!data || Wb.indexOf(['table', 'view', 'sp', 'fn', 'tr', 'field', 'idx'], data.subType) == -1);\n    app.editItem.setDisabled(!data || Wb.indexOf(['table', 'view', 'sp', 'fn', 'tr', 'idx'], data.type) == -1);\n    app.removeItem.setDisabled(!data || Wb.indexOf(['table', 'view', 'sp', 'fn', 'tr', 'field', 'idx'], data.type) == -1);\n    app.openItem.setDisabled(!data || Wb.indexOf(['table', 'view'], data.type) == -1);\n  },\n  /**\n   * 拼结多行记录描述的建索引SQL语句。\n   * @param {Object} data 多行记录组成对象。\n   * @return {String} 建索引SQL语句。\n   */\n  createIndexScript: function(data) {\n    var rows = data.rows,\n      isFirst = true,\n      script;\n    if (app.basicParams.iconCls == 'key_icon') {\n      //主键\n      script = 'ALTER TABLE ' + rows[0].tableName + ' ADD CONSTRAINT ' + rows[0].INDEX_NAME + ' PRIMARY KEY (';\n    } else {\n      script = 'CREATE ' + (app.basicParams.iconCls == 'star_icon' ? 'UNIQUE ' : '') + 'INDEX ' +\n        rows[0].INDEX_NAME + ' ON ' + rows[0].tableName + '(';\n    }\n    Wb.each(rows, function(item) {\n      if (isFirst)\n        isFirst = false;\n      else script += ', ';\n      script += item.FIELD_NAME;\n    });\n    script += ')';\n    return script;\n  },\n  /**\n   * 加载脚本类型的属性。\n   * @param {Object} data 原始的数据。\n   */\n  loadScriptProperties: function(data) {\n    var script;\n    if (!data.rows.length) {\n      this.save = app.forbidden;\n      script = '(forbidden)';\n    } else {\n      script = data.rows[0].SCRIPT;\n      if (Ext.String.startsWith(script, '!'))\n        script = app[script.substring(1)](data);\n    }\n    this.stopChangeEvent = true;\n    this.editor.setValue(script);\n    this.stopChangeEvent = false;\n  },\n  /**\n   * 自动格式化指定doc的脚本。\n   * @param {Doc} doc 文档对象。\n   */\n  formatScript: function(doc) {\n    var cursor = doc.getCursor(),\n      scroll = doc.getScrollInfo();\n    doc.autoFormatRange({\n      line: 0,\n      ch: 0\n    }, {\n      line: Number.MAX_VALUE,\n      ch: Number.MAX_VALUE\n    });\n    doc.scrollTo(scroll.left, scroll.top);\n    doc.setCursor(cursor);\n  },\n  /**\n   * 新建脚本处理方法。\n   */\n  scriptAddHandler: function() {\n    var sql, tag = app.getTag(),\n      win = app.addScriptWin,\n      type = app.selData.subType;\n    win.show();\n    Sql.autoComplete(win.editor);\n    win.setIconCls(app.objectIconCls[type]);\n    win.setTitle('新建' + app.selData.text + ' - ' + app.basicParams.jndi);\n    sql = tag[type + 'Add'];\n    win.editor.setValue(sql || '');\n  },\n  /**\n   * 节点排序使用的方法。\n   */\n  sortHandler: function(node) {\n    node.sort(function(n1, n2) {\n      v1 = n1.data.text.toLowerCase();\n      v2 = n2.data.text.toLowerCase();\n      if (v1 > v2) return 1;\n      else if (v1 < v2) return -1;\n      else return 0;\n    });\n  },\n  /**\n   * 加载当前数据库字段类型信息store。basicParams\n   */\n  loadFieldTypeStore: function() {\n    var rows = [];\n    Wb.each(app.getTag().types, function(type) {\n      rows.push({\n        type: type\n      });\n    });\n    app.fieldTypeStore.loadData(rows);\n  },\n  /**\n   * 获取指定节点所在数据库的tag信息。如果未指定将使用当前节点。\n   */\n  getTag: function(node) {\n    var parent = Wb.getNode(node || app.selNode, 1);\n    return Wb.hasNS('firstChild.raw.tag', parent) ? parent.firstChild.raw.tag : {};\n  },\n  /**\n   * 提示禁止操作警告信息。\n   */\n  forbidden: function() {\n    Wb.warn('禁止执行该操作。');\n  },\n  /**\n   * 复制当前选择的对象。\n   */\n  copyHandler: function() {\n    app.copiedObject = Ext.copyTo({}, app.basicParams, 'jndi,prefix,text,type,quoteChar');\n  },\n  /**\n   * 把复制的对象粘贴到当前选择的节点。\n   */\n  pasteHandler: function() {\n    var basicParams, node = app.selNode;\n    if (node.data.type == 'table')\n      node = node.parentNode;\n    basicParams = app.getBasicParams(node);\n    Wb.promptString('设置新的对象名称', function(value, win) {\n      Wb.request({\n        url: 'm?xwl=dev/datainfo/SQL/dbm/paste-object',\n        params: Wb.apply({\n          newJndi: basicParams.jndi,\n          newPrefix: basicParams.prefix,\n          newText: value,\n          newQuoteChar: basicParams.quoteChar\n        }, app.copiedObject),\n        success: function() {\n          win.close();\n          Wb.loadSelect(node, {\n            iconCls: 'table_icon',\n            text: value,\n            table: value,\n            subType: 'tableSub',\n            type: 'table'\n          }, function() {\n            app.sortHandler(node);\n          });\n        }\n      });\n    }, {\n      value: app.copiedObject.text + '_COPY'\n    });\n  }\n});"}}],"roles":{},"title":"数据管理","iconCls":"dbe_icon","inframe":false,"pageLink":""}