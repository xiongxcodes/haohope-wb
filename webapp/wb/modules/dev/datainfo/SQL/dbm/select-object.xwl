{"hidden":true,"children":[{"configs":{"itemId":"module","serverScript":"app.execute('m?xwl=dev/datainfo/SQL/dbm/utils');\napp.loadObjectMap();\nvar conn, sqlTpl, treeItems,\n  params = app.get(),\n  objectIconCls = {\n    prefix: 'item_icon',\n    table: 'table_icon',\n    view: 'view_icon',\n    sp: 'sp_icon',\n    fn: 'file_ss_icon',\n    tr: 'execute_icon'\n  },\n  subTypes = {\n    db: 'prefix',\n    prefix: 'misc',\n    table: 'tableSub'\n  };\n\nif (params.subType == 'db') {\n  sendDb();\n  return;\n}\n\nconn = DbUtil.getConnection(params.jndi);\ntry {\n  sqlTpl = app.getSqlTpl(conn);\n  if (!sqlTpl)\n    throw '该版本WebBuilder不支持该类型数据库。';\n  switch (params.subType) {\n    case 'misc':\n      treeItems = getMisc();\n      break;\n    case 'tableSub':\n      treeItems = getTableSub();\n      break;\n      //     case 'field':\n      //       treeItems = getFields();\n      //       break;\n    default:\n      if (params.subType == 'field' && sqlTpl.tag.db == 'sqlserver')\n        treeItems = getFields();\n      else\n        treeItems = getObjects(params.subType);\n  }\n} finally {\n  DbUtil.close(conn);\n}\napp.send(treeItems);\n\n/**\n * 获取指定类型的对象列表。\n * @param {String} type 对象的类型。\n * @param {Boolean} [checkExists] 是否仅检查是否存在子项。默认为false。\n * @return {Array/Boolean} 节点列表或是否存在子项。\n */\nfunction getObjects(type, checkExists) {\n  var rs, st, sql, map, isFirst, object, record, value, isQueryType, field1, meta, children = [],\n    objectPrefix = params.jndi + '.' + params.prefix + '.',\n    entities = ['table', 'view', 'sp', 'tr', 'fn'],\n    currentType = checkExists ? type : app.get('subType'),\n    isPrefix = currentType == 'prefix',\n    convertFn = function(k, v) {\n      record[v] = record[k];\n    };\n  try {\n    isQueryType = params.treeType == 'query';\n    sql = sqlTpl[type];\n    if (Wb.isObject(sql)) {\n      map = sql.map;\n      sql = sql.sql;\n    }\n    sql = WebUtil.replaceParams(request, sql);\n    st = conn.prepareStatement(sql);\n    rs = st.executeQuery();\n    meta = rs.getMetaData();\n    field1 = DbUtil.getFieldName(meta.getColumnLabel(1));\n    isFirst = true;\n    while (rs.next()) {\n      record = Wb.getRecord(rs, meta);\n      value = record[field1];\n      if (isPrefix && !app.canShowPrefix(params.jndi + '.' + value))\n        continue;\n      if (Wb.indexOf(entities, type) != -1 && !app.canAccess(objectPrefix + value, 1))\n        continue;\n      if (checkExists)\n        return true;\n      object = {\n        text: value,\n        type: type,\n        fullEntityName: params.prefix + '.' + value,\n        subType: subTypes[type],\n        jndi: params.jndi,\n        iconCls: objectIconCls[type]\n      };\n      if (isFirst && type == 'prefix') {\n        object.tag = sqlTpl.tag;\n        isFirst = false;\n      }\n      if (type == 'view' || type == 'sp' || type == 'fn' || type == 'tr' || type == 'field')\n        object.leaf = true;\n      if (isQueryType && (type == 'view' || type == 'table' || type == 'sp'))\n        object.leaf = true;\n      object[type] = value;\n      if (map) {\n        Wb.each(map, convertFn);\n      }\n      children.push(Wb.apply(object, record));\n    }\n  } finally {\n    DbUtil.close(rs);\n    DbUtil.close(st);\n  }\n  if (checkExists)\n    return false;\n  if (app.get('_istree'))\n    return children;\n  else\n    return {\n      rows: children\n    };\n}\n\n/**\n * 发送数据库列表。\n */\nfunction sendDb() {\n  var list = Wb.decode(com.wb.interact.DBE.getDbList()),\n    rows = [];\n  Wb.each(list, function(item) {\n    item.subType = 'prefix';\n    if (app.canAccess(item.jndi, 1))\n      rows.push(item);\n  });\n  app.send(rows);\n}\n\n/**\n * 获取表子项列表。\n * @return {Array} 节点列表。\n */\nfunction getTableSub() {\n  var children = [{\n    text: '字段',\n    iconCls: 'db_field_icon',\n    subType: 'field'\n  }, {\n    text: '索引',\n    iconCls: 'sort_by_name_icon',\n    subType: 'idx',\n    children: getObjects('idx', true) ? null : []\n  }];\n  return children;\n}\n\n/**\n * 获取表的字段列表。\n * @return {Array} 节点列表。\n */\nfunction getFields() {\n  var rs, st, meta, i, j, name, items = [];\n  try {\n    st = conn.createStatement();\n    rs = st.executeQuery('select * from ' + params.fullTableName + ' where 1=0');\n    meta = rs.getMetaData();\n    j = meta.getColumnCount() + 1;\n    for (i = 1; i < j; i++) {\n      name = meta.getColumnLabel(i);\n      items.push({\n        text: name,\n        iconCls: 'db_field_icon',\n        type: 'field',\n        field: name,\n        leaf: true\n      });\n    }\n  } finally {\n    DbUtil.close(rs);\n    DbUtil.close(st);\n  }\n  return items;\n}\n\n/**\n * 获取多种不同数据库资源的列表。\n * @return {Array} 节点列表。\n */\nfunction getMisc() {\n  var children = [{\n    text: '表',\n    iconCls: 'table_icon',\n    subType: 'table',\n    children: getObjects('table', true) ? null : []\n  }, {\n    text: '视图',\n    iconCls: 'view_icon',\n    subType: 'view',\n    children: getObjects('view', true) ? null : []\n  }];\n  if (params.treeType != 'query') {\n    children = children.concat([{\n      text: '过程',\n      iconCls: 'sp_icon',\n      subType: 'sp',\n      children: getObjects('sp', true) ? null : []\n    }, {\n      text: '函数',\n      iconCls: 'file_ss_icon',\n      subType: 'fn',\n      children: getObjects('fn', true) ? null : []\n    }, {\n      text: '触发器',\n      iconCls: 'execute_icon',\n      subType: 'tr',\n      children: getObjects('tr', true) ? null : []\n    }]);\n  }\n  return children;\n}"},"expanded":true,"children":[],"type":"module"}],"roles":{},"title":"查询对象","iconCls":"","inframe":false,"pageLink":""}