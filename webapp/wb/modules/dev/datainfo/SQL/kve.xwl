{"hidden":false,"children":[{"configs":{"itemId":"module"},"expanded":true,"children":[{"configs":{"layout":"border","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"itemId":"tree1","split":"true","root":"{\n  KEY_NAME: '全部',\n  TYPE: 3,\n  expanded: true,\n  KEY_ID: '-1'\n}","width":"370","displayField":"KEY_NAME","viewConfig":"app.treeViewConfig","region":"west","title":"键名列表","multiSelect":"true"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['KEY_NAME', 'KEY_ID', 'TYPE']","url":"m?xwl=dev/datainfo/SQL/kve/get-tree"},"expanded":false,"children":[],"type":"treestore","events":{"beforeload":"operation.params.KEY_ID = operation.node.data.KEY_ID;"}},{"configs":{"itemId":"tbar"},"expanded":true,"children":[{"configs":{"itemId":"newFolderBtn","tooltip":"添加新的目录","text":"添加目录","iconCls":"folder_add_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.setKey('addFolder');"}},{"configs":{"itemId":"newNameBtn","tooltip":"添加新的键名","text":"添加键名","iconCls":"db_form_add_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.setKey('addName');"}},{"configs":{"itemId":"editNameBtn","tooltip":"修改选择的键名或目录","text":"修改","iconCls":"db_form_edit_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.setKey('modify');"}},{"configs":{"itemId":"delNameBtn","tooltip":"删除选择的键名或目录","text":"删除","iconCls":"db_form_delete_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"var sels = app.tree1.getSelection();\nif (app.tree1.selModel.isSelected(app.tree1.getRootNode())) {\n  Wb.warn('不允许删除全部键值。');\n  return;\n}\nWb.confirmDo(sels, function() {\n  Wb.request({\n    url: 'm?xwl=dev/datainfo/SQL/kve/del-keyname',\n    params: {\n      nodes: Wb.pluck(sels, 'KEY_ID')\n    },\n    success: function(resp) {\n      Wb.remove(app.tree1, sels);\n    }\n  });\n}, 'KEY_NAME');"}},{"configs":{"itemId":"refreshNameBtn","tooltip":"刷新当前键名列表","text":"刷新","iconCls":"refresh_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.reload(app.tree1);"}}],"type":"toolbar"}],"type":"tree","events":{"selectionchange":"var n = selected[0];\napp.grid1.setDisabled(!n || n.data.TYPE == 3);\nif (n && n.data.TYPE < 3) {\n  app.list(n.data.KEY_ID, n.data.KEY_NAME, n.data.TYPE);\n} else {\n  Wb.setTitle(app.grid1);\n  app.grid1.store.removeAll();\n}","afterrender":"Wb.selFirst(app.tree1);"}},{"configs":{"itemId":"grid1","editable":"true","pagingBar":"false","region":"center","title":"子项列表","loadColumns":"none","multiSelect":"true"},"expanded":true,"children":[{"configs":{"itemId":"store","pageSize":"-1","sorters":"'K'","url":"m?xwl=dev/datainfo/SQL/kve/select"},"expanded":false,"children":[],"type":"store","events":{"success":"if (app.TYPE == app.grid1.columnType)\n  return;\nvar cols = Wb.getColumns(store);\ncols.splice(5, 1); //删除TYPE列\ncols.splice(1, 2); //删除KEY_ID,KEY_NAME列\ncols[1].text = '键';\nif (app.TYPE == '2') {\n  cols[1].editor.xtype = 'numberfield';\n  cols[1].editor.allowDecimal = false;\n  cols[1].editor.hideTrigger = true;\n}\ncols[1].editor.listeners = {\n  change: app.notifyChange\n};\ncols[1].width = 160;\ncols[2].text = '值';\ncols[2].editor.listeners = cols[1].editor.listeners;\ncols[2].flex = 1;\napp.grid1.columnType = app.TYPE;\napp.grid1.reconfigure(null, cols);"}},{"configs":{"itemId":"tbar"},"expanded":true,"children":[{"configs":{"itemId":"newBtn","handler":"app.addItem","tooltip":"添加新的子项 (Ctrl+E)","disabled":"true","text":"添加","iconCls":"record_add_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.addEdit(app.grid1, {\n  KEY_ID: app.KEY_ID\n});\napp.setButtons(false);"}},{"configs":{"itemId":"delBtn","tooltip":"删除选择的子项","disabled":"true","text":"删除","iconCls":"record_delete_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"Wb.remove(app.grid1);\napp.setButtons(false);"}},{"configs":{"itemId":"saveBtn","tooltip":"保存对子项所有的更改 (Ctrl+S)","disabled":"true","text":"保存","iconCls":"save_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.save();"}},{"configs":{"itemId":"rejectBtn","tooltip":"撤消最后一次保存后的所有更改","disabled":"true","text":"撤消修改","iconCls":"undo_icon"},"expanded":true,"children":[],"type":"item","events":{"click":"Wb.confirm('确定要撤消对表格所做的所有更改吗？', function() {\n  Wb.reject(app.grid1);\n  app.setButtons(true);\n});"}},{"configs":{"itemId":"item2","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"refreshBtn","tooltip":"刷新当前键名所有子项列表","disabled":"true","text":"刷新","iconCls":"refresh_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.list(app.KEY_ID, app.KEY_NAME, app.TYPE);"}}],"type":"toolbar"}],"type":"grid"}],"type":"viewport","events":{"afterrender":"new Ext.KeyNav({\n  viewport: app.viewport1,\n  E: {\n    ctrl: true,\n    fn: function() {\n      if (!app.newBtn.disabled)\n        app.newBtn.fireEvent('click');\n    }\n  },\n  S: {\n    ctrl: true,\n    fn: app.save\n  }\n});"}}],"type":"module","events":{"beforeunload":"if (!app.saveBtn.disabled)\n  return '键值项已经被修改。';","initialize":"Wb.apply(app, {\n  /**\n   * 显示指定键名所有子项。\n   * @param {String} id 键id。\n   * @param {String} name 键名称。\n   * @param {String} type 类别。\n   */\n  list: function(id, name, type) {\n    function load() {\n      var store = app.grid1.store;\n      app.KEY_ID = id;\n      app.KEY_NAME = name;\n      app.TYPE = type;\n      Wb.setTitle(app.grid1, name);\n      store.removeAll();\n      store.load({\n        params: {\n          KEY_ID: id,\n          TYPE: type\n        },\n        callback: function(a, b, succ) {\n          app.newBtn.setDisabled(!succ);\n          app.delBtn.setDisabled(!succ);\n          if (succ && app.refreshBtn.disabled)\n            app.refreshBtn.setDisabled(false);\n        }\n      });\n    }\n    if (app.saveBtn.disabled) {\n      load();\n    } else {\n      Wb.choose('子项列表已经被修改，保存所做的更改吗？',\n        function(btn) {\n          if (btn == 'yes')\n            app.save(function() {\n              load();\n            });\n          else if (btn == 'no') {\n            app.setButtons(true);\n            load();\n          }\n        });\n    }\n  },\n  save: function(callback) {\n    if (!Wb.verifyGrid(app.grid1))\n      return;\n    //检查键名重复\n    var k, isDup = false,\n      keys = {},\n      editing = Wb.findEditing(app.grid1);\n    app.grid1.store.each(function(rec) {\n      k = rec.data.K;\n      if (keys[k]) {\n        editing.startEdit(rec, 1);\n        if (editing.activeEditor)\n          editing.activeEditor.field.markInvalid('重复的键名');\n        isDup = true;\n        return false;\n      } else {\n        keys[k] = 1;\n      }\n    });\n    if (isDup)\n      return;\n    //提交保存\n    Wb.sync({\n      grid: app.grid1,\n      url: 'm?xwl=dev/datainfo/SQL/kve/save',\n      params: {\n        KEY_NAME: app.KEY_NAME,\n        TYPE: app.TYPE\n      },\n      message: '正在保存中...',\n      success: function(resp) {\n        Wb.syncCreate(app.grid1, Wb.decode(resp.responseText)); //把数据更新到新建记录并完成同步\n        app.setButtons(true);\n        Ext.callback(callback);\n      }\n    });\n  },\n  setButtons: function(disabled) {\n    app.saveBtn.setDisabled(disabled);\n    app.rejectBtn.setDisabled(disabled);\n  },\n  notifyChange: function() {\n    app.setButtons(false);\n  },\n  setKey: function(type) {\n    var win, title, iconCls, isModify = type == 'modify',\n      isFolder = type == 'addFolder',\n      node = app.tree1.getSelection()[0],\n      items = [{\n        fieldLabel: '名称',\n        itemId: 'KEY_NAME',\n        allowBlank: false\n      }];\n    if (node) {\n      if (node.isRoot() && isModify) {\n        Wb.warn('不能修改根节点。');\n        return;\n      }\n    } else {\n      if (isModify) {\n        Wb.warn('请选择要修改的节点。');\n        return;\n      } else {\n        node = app.tree1.getRootNode();\n      }\n    }\n    if (!isModify && node.isLeaf())\n      node = node.parentNode;\n    switch (type) {\n      case 'modify':\n        title = '修改 - ' + node.data.KEY_NAME;\n        iconCls = 'db_form_edit_icon';\n        break;\n      case 'addFolder':\n        title = '添加目录';\n        iconCls = 'folder_add_icon';\n        break;\n      case 'addName':\n        title = '添加键名';\n        iconCls = 'record_add_icon';\n        break;\n    }\n    if (type == 'addName') {\n      items.push({\n        fieldLabel: '类别',\n        itemId: 'TYPE',\n        allowBlank: false,\n        xtype: 'combo',\n        value: 1,\n        forceSelection: true,\n        saveKeyname: 'sys.kve.type',\n        store: [\n          [1, '字符'],\n          [2, '数值']\n        ]\n      });\n    }\n    win = Wb.prompt({\n      title: title,\n      iconCls: iconCls,\n      items: items,\n      handler: function(values) {\n        if (isModify) {\n          Ext.copyTo(values, node.data, 'KEY_ID,TYPE,PARENT_ID');\n          values.oldName = node.data.KEY_NAME;\n          Wb.request({\n            url: 'm?xwl=dev/datainfo/SQL/kve/update-keyname',\n            params: values,\n            success: function() {\n              Wb.update(node, values);\n              win.close();\n            }\n          });\n        } else {\n          values.PARENT_ID = node.data.KEY_ID;\n          if (isFolder)\n            values.TYPE = 3;\n          Wb.request({\n            url: 'm?xwl=dev/datainfo/SQL/kve/add-keyname',\n            params: values,\n            success: function(resp) {\n              var rec = Wb.decode(resp.responseText);\n              Wb.loadSelect(node, Wb.apply({\n                leaf: !isFolder,\n                children: isFolder ? [] : null\n              }, rec), function() {\n                win.close();\n              }, 'KEY_NAME');\n              win.close();\n            }\n          });\n        }\n      }\n    });\n    if (isModify)\n      Wb.setValue(win, node.data);\n  },\n  treeViewConfig: {\n    plugins: {\n      ptype: 'treeviewdragdrop'\n    },\n    listeners: {\n      beforedrop: function(node, data, om, dp, dh) {\n        var parentId,\n          isAppend = dp == 'append',\n          nodes = data.records,\n          doMove = function() {\n            Wb.request({\n              url: 'm?xwl=dev/datainfo/SQL/kve/move',\n              params: {\n                newParentId: parentId,\n                recs: Wb.getData(nodes)\n              },\n              callback: function(a, succ, resp) {\n                if (succ) {\n                  dh.processDrop();\n                  Wb.each(nodes, function(node) {\n                    node.set('PARENT_ID', parentId);\n                  });\n                  app.tree1.store.commitChanges();\n                  app.tree1.setSelection(nodes);\n                } else {\n                  var respText = resp.responseText;\n                  dh.cancelDrop();\n                  if (respText && respText.indexOf('WB_KEY_TREE_UNQ1')) {\n                    Wb.error('同一目录下的子目录名称不能相同。');\n                    return;\n                  }\n                }\n              }\n            });\n          };\n        dh.wait = true;\n        if (isAppend)\n          parentId = om.data.KEY_ID;\n        else\n          parentId = om.parentNode.data.KEY_ID;\n        if (isAppend && !om.isLoaded()) {\n          om.expand(false, function() {\n            if (!om.isLoaded()) {\n              dh.cancelDrop();\n              return;\n            }\n            doMove();\n          });\n        } else\n          doMove();\n      }\n    }\n  }\n});"}}],"roles":{},"title":"键值编辑","iconCls":"dp_icon","inframe":false,"pageLink":""}