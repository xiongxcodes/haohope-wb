{"hidden":false,"children":[{"configs":{"itemId":"module","serverScript":"var icons = com.wb.interact.IDE.getIconList(),\n  i, j = icons.size();\nfor (i = 0; i < j; i++) {\n  icons.set(i, icons.get(i).slice(0, -5));\n}\napp.set({\n  iconData: Wb.quote(icons),\n  basePathLen: FileUtil.getPath(new File(Base.path, 'wb/system/resource')).length() + 1\n});","jsLinks":"[\"wb/libs/raphael/raphael.js\", \"wb/script/draw{#debugSuffix#}.js\"]","cssLinks":"[\"wb/css/ide{#debugSuffix#}.css\"]"},"expanded":true,"children":[{"configs":{"itemId":"fileDialog","file":"m?xwl=dev/flow/file-dialog"},"expanded":false,"children":[],"type":"xwl"},{"configs":{"layout":"fit","itemId":"actionWin","dialog":"true","resizable":"true","width":"1000","iconCls":"action_icon","title":"动作类型设置","maximizable":"true"},"expanded":false,"children":[{"configs":{"itemId":"actionGrid","margin":"8","sortableColumns":"false","enableColumnHide":"false","editable":"true","pagingBar":"false","scroll":"none"},"expanded":true,"children":[{"configs":{"itemId":"store","data":"app.actionData","normalName":"actionStore","fields":"[\n  'selected',\n  'name',\n  'text',\n  'iconCls',\n  'module',\n  'beforeFn',\n  'afterFn'\n]"},"expanded":false,"children":[],"type":"store"},{"configs":{"itemId":"viewConfig","markDirty":"false","plugins":"{\n  ptype: 'gridviewdragdrop',\n}"},"expanded":false,"children":[],"type":"tableview"},{"configs":{"itemId":"columns"},"expanded":true,"children":[{"configs":{"itemId":"nameCol","renderer":"metaData.tdAttr = 'style=\"background:#f3f3f3;\"';\nreturn value;","dataIndex":"name","width":"80","text":"动作名称"},"expanded":true,"children":[],"type":"column"},{"configs":{"itemId":"selcol","xtype":"checkcolumn","dataIndex":"selected","width":"50","text":"选择"},"expanded":false,"children":[],"type":"column"},{"configs":{"itemId":"textCol","dataIndex":"text","width":"80","text":"按钮标题"},"expanded":true,"children":[{"configs":{"itemId":"editor"},"expanded":false,"children":[],"type":"text"}],"type":"column"},{"configs":{"tagConfigs":"{\n  editor: app.iconEditor(false)\n}","itemId":"iconClsCol","renderer":"if (value)\n  return Wb.getIcon(value + '_icon') + value;\nelse\n  return value;","dataIndex":"iconCls","width":"100","text":"按钮图标"},"expanded":true,"children":[],"type":"column"},{"configs":{"itemId":"moduleCol","dataIndex":"module","flex":"1","minWidth":"100","text":"执行模块"},"expanded":true,"children":[{"configs":{"itemId":"editor","onTriggerClick":"var editing = Wb.findEditing(app.actionGrid),\n  rec = editing.activeRecord;\nediting.completeEdit();\nWb.run({\n  url: 'module-selector',\n  single: true,\n  success: function(scope) {\n    scope.show(function(value, win) {\n      Wb.update(rec, {\n        module: value\n      });\n      win.close();\n    });\n  }\n});","triggerCls":"x-form-ellipsis-trigger"},"expanded":false,"children":[],"type":"combo"}],"type":"column"},{"configs":{"itemId":"beforeFnCol","dataIndex":"beforeFn","width":"130","text":"前置方法"},"expanded":true,"children":[{"configs":{"itemId":"editor"},"expanded":false,"children":[],"type":"text"}],"type":"column"},{"configs":{"itemId":"afterFnCol","dataIndex":"afterFn","width":"130","text":"后置方法"},"expanded":true,"children":[{"configs":{"itemId":"editor"},"expanded":false,"children":[],"type":"text"}],"type":"column"}],"type":"array"}],"type":"grid"}],"type":"window","events":{"afterrender":"win.down('toolbar').insert(0, {\n  text: '删除',\n  tooltip: '删除动作类型数据并关闭窗口',\n  buttonStyle: 'danger',\n  handler: function() {\n    Wb.confirm('确定要清空动作类型数据并关闭窗口吗？', function() {\n      Ext.callback(app.actionWinCallback, app, ['', win]);\n    });\n  }\n});\nwin.down('toolbar').insert(0, [{\n  text: '选择全部',\n  tooltip: '选择所有动作',\n  handler: function() {\n    app.actionStore.each(function(rec) {\n      rec.set('selected', 1);\n    });\n  }\n}, {\n  text: '取消全部',\n  tooltip: '取消选择所有动作',\n  handler: function() {\n    app.actionStore.each(function(rec) {\n      rec.set('selected', 0);\n    });\n  }\n}, '->']);","show":"//由于窗口高度自适应因此首次需代码置中\nif (!win.reAligned) {\n  setTimeout(function() {\n    win.alignTo(Ext.getBody(), 'c-c');\n  }, 50);\n  win.reAligned = true;\n}","ok":"Ext.callback(app.actionWinCallback, app, [Wb.encode(Wb.getData(app.actionStore)), win]);"}},{"configs":{"layout":"border","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"itemId":"toolbar1","enableOverflow":"true","weight":"90","region":"north"},"expanded":true,"children":[{"configs":{"itemId":"newBtn","handler":"app.addFile","tooltip":"添加新的流程 (Ctrl+E)","text":"新建","iconCls":"new_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"openBtn","handler":"app.open","tooltip":"打开已经存在的流程文件 (Ctrl+O)","text":"打开","iconCls":"open_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"saveBtn","handler":"app.save","xtype":"splitbutton","tooltip":"保存当前修改的文件 (Ctrl+S)","minWidth":"180","text":"保存","iconCls":"save_icon"},"expanded":false,"children":[{"configs":{"itemId":"saveAllBtn","handler":"app.saveAll","text":"保存全部<span class=\"wb_right\">Ctrl+Shift+S<\/span>","iconCls":"save_all_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"saveAsBtn","handler":"app.saveAs","text":"另存为...","iconCls":"save_as_icon"},"expanded":false,"children":[],"type":"item"}],"type":"item"},{"configs":{"itemId":"closeBtn","xtype":"splitbutton","tooltip":"关闭当前标签页","text":"关闭","iconCls":"close_icon"},"expanded":false,"children":[{"configs":{"itemId":"closeAllBtn","handler":"app.closeAll","text":"关闭全部"},"expanded":false,"children":[],"type":"item","events":{"click":"app.doClose();"}},{"configs":{"itemId":"closeOthers","handler":"app.closeOthers","text":"关闭其他"},"expanded":false,"children":[],"type":"item","events":{"click":"app.doClose(app.tab1.getActiveTab());"}}],"type":"item","events":{"click":"Wb.closeTab(app.tab1);"}},{"configs":{"itemId":"sp1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"cutBtn","handler":"app.cutNodes","tooltip":"剪切选择的节点 (Ctrl+X)","text":"剪切","iconCls":"cut_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"copyBtn","handler":"app.copyNodes","tooltip":"复制选择的节点 (Ctrl+C)","text":"复制","iconCls":"copy_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"pasteBtn","handler":"app.pasteNodes","tooltip":"在当前流程中粘贴剪贴板中的节点 (Ctrl+V)","text":"粘贴","iconCls":"paste_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"removeBtn","handler":"app.removeNodes","tooltip":"删除选择的节点或连接 (Ctrl+Shift+X|Delete)","text":"删除","iconCls":"delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"sp2","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"autoScrollBtn","tooltip":"指定当前页面是否显示滚动条","text":"滚动条","iconCls":"container_icon","enableToggle":"true"},"expanded":false,"children":[],"type":"item","events":{"toggle":"var card = app.tab1.getActiveTab();\nif (card) {\n  card.drawComp.props.autoScroll = pressed;\n  card.setAutoScroll(pressed);\n  app.setChanged();\n}"}},{"configs":{"itemId":"showGridBtn","tooltip":"指定当前页面是否显示网格线","text":"网格线","iconCls":"table_borders_icon","enableToggle":"true"},"expanded":false,"children":[],"type":"item","events":{"toggle":"var drawComp = app.getDrawComp();\nif (drawComp) {\n  drawComp.props.showGrid = pressed;\n  drawComp.body.setStyle('background-image', pressed ? 'url(wb/images/app/dot.png)' : 'none');\n  app.setChanged();\n}"}},{"configs":{"itemId":"sp3","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"nodeBtn","toggleGroup":"flow","tooltip":"在当前页面添加新的节点","text":"添加节点","iconCls":"object_icon","enableToggle":"true"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"linkBtn","toggleGroup":"flow","tooltip":"在源节点和目标节点之间添加连线","text":"添加连线","iconCls":"link_icon","enableToggle":"true"},"expanded":false,"children":[],"type":"item"}],"type":"toolbar"},{"configs":{"itemId":"tab1","plugins":"['tabreorderer', 'tabclosemenu']","region":"center"},"expanded":false,"children":[],"type":"tab","events":{"tabchange":"app.loadProperties(newCard.drawComp.getSelection());\napp.autoScrollBtn.toggle(newCard.drawComp.props.autoScroll, true);\napp.showGridBtn.toggle(newCard.drawComp.props.showGrid, true);"}},{"configs":{"itemId":"property1","sourceConfig":"app.sourceConfig()","split":"true","sortableColumns":"false","nameColumnWidth":"85","width":"430","viewConfig":"{\n  stripeRows: false\n}","region":"east"},"expanded":true,"children":[{"configs":{"groupField":"type","itemId":"store","fields":" ['type', 'name', 'value']"},"expanded":false,"children":[],"type":"store","events":{"update":"if (operation == 'commit')\n  app.setValue(record.data.name, record.data.value, true);"}},{"configs":{"itemId":"features"},"expanded":true,"children":[{"configs":{"itemId":"feature1","ftype":"grouping","groupHeaderTpl":"{name}","collapsible":"false"},"expanded":false,"children":[],"type":"feature"}],"type":"array"}],"type":"propertygrid","events":{"afterrender":"app.editPlugin = Wb.findEditing(app.property1);\npropertygrid.mon(app.editPlugin, {\n  canceledit: {\n    fn: app.propertyCancelEdit\n  }\n});"}}],"type":"viewport","events":{"afterrender":"//通用快捷键\nnew Ext.KeyNav({\n  viewport: app.viewport1,\n  E: {\n    ctrl: true,\n    fn: app.addFile\n  },\n  O: {\n    ctrl: true,\n    fn: app.open\n  },\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      if (e.shiftKey)\n        app.saveAll();\n      else\n        app.save();\n    }\n  }\n});\n\n//有输入焦点时忽略处理快捷键\nnew Ext.KeyNav({\n  viewport: app.viewport1,\n  ignoreInputFields: true,\n  del: app.removeNodes,\n  A: {\n    ctrl: true,\n    fn: app.selectAll\n  },\n  C: {\n    ctrl: true,\n    fn: app.copyNodes\n  },\n  X: {\n    ctrl: true,\n    fn: function(e) {\n      if (e.shiftKey)\n        app.removeNodes();\n      else\n        app.cutNodes();\n    }\n  },\n  V: {\n    ctrl: true,\n    fn: app.pasteNodes\n  }\n});\n\n//app.fileDialog.permBtn.show();"}}],"type":"module","events":{"beforeunload":"var title = Wb.getModifiedTitle(app.tab1, true);\nif (title !== null)\n  return title + '已经被修改';","initialize":"Wb.apply(app, {\n  fileExt: '.flw',\n  nodeName: '节点',\n  lineName: '连线',\n  basePathLen: parseInt('{#basePathLen#}', 10),\n  iconData: Wb.decode(\"{#iconData#}\"),\n  pathKeys: ['beeline', 'color', 'fontSize', 'backColor', 'iconCls', 'lineTitle', 'condition', 'remark'],\n  nodeKeys: ['type', 'color', 'fontSize', 'backColor', 'iconCls', 'name', 'dialog', 'viewDialog', 'minWidth',\n    'actionType', 'doUser', 'ccUser', 'passUsers', 'nodeTitle', 'remark'\n  ],\n  flowKeys: ['backColor', 'flowName', 'defaultDialog', 'defaultViewDialog', 'beforeModule', 'afterModule', 'finalModule', 'defaultMinWidth', 'remark'],\n  actionData: [{\n    name: 'pass',\n    text: '通过',\n    iconCls: 'ok',\n    selected: 1\n  }, {\n    name: 'reject',\n    text: '退回',\n    iconCls: 'minus',\n    selected: 1\n  }, {\n    name: 'beforeSign',\n    text: '前加签',\n    iconCls: 'record_edit',\n    selected: 0\n  }, {\n    name: 'plusSign',\n    text: '并加签',\n    iconCls: 'file_edit',\n    selected: 0\n  }, {\n    name: 'afterSign',\n    text: '后加签',\n    iconCls: 'table_edit',\n    selected: 0\n  }, {\n    name: 'turn',\n    text: '转办',\n    iconCls: 'set',\n    selected: 0\n  }, {\n    name: 'cancel',\n    text: '取消',\n    iconCls: 'cancel',\n    selected: 1\n  }],\n  //获得当前激活的绘图画布对象\n  getDrawComp: function() {\n    var card = app.tab1.getActiveTab();\n    if (card)\n      return card.drawComp;\n    else\n      return null;\n  },\n  //获得当前页选择的对象\n  getSelection: function() {\n    var comp = app.getDrawComp();\n    if (comp)\n      return comp.getSelection();\n    else\n      return [];\n  },\n  //删除当前选择的节点和连线\n  removeNodes: function() {\n    var comp = app.getDrawComp();\n    if (comp)\n      comp.removeSelection();\n  },\n  //在画布上beforemouseDown事件\n  beforeMouseDown: function() {\n    app.editPlugin.completeEdit();\n  },\n  //在画布上mouseDown事件\n  mouseDown: function(drawComp, comp) {\n    if (app.linkBtn.pressed) {\n      var sels = drawComp.getSelection(),\n        hint;\n      if (sels.length != 1 || sels[0].isPath)\n        hint = '请选择1个源节点';\n      else if (!comp)\n        hint = '请选择1个目标节点';\n      else if (sels[0] == comp)\n        hint = '源节点和目标节点不能相同';\n      app.linkSource = sels[0];\n      if (hint) {\n        Wb.warn(hint);\n        app.linkBtn.toggle();\n        return false;\n      }\n    }\n  },\n  //在画布上mouseUp事件\n  mouseUp: function(drawComp, comp, x, y, width, height) {\n    if (app.nodeBtn.pressed) {\n      drawComp.rect({\n        x: x,\n        y: y,\n        width: width < 8 ? 0 : width,\n        height: height < 8 ? 0 : height,\n        name: app.uniqueName(drawComp, app.nodeName)\n      }, true);\n      app.nodeBtn.toggle();\n    } else if (app.linkBtn.pressed) {\n      drawComp.link(app.linkSource, comp, {\n        name: app.uniqueName(drawComp, app.lineName)\n      });\n      app.linkBtn.toggle();\n    }\n  },\n  //获得唯一的名称\n  uniqueName: function(drawComp, name, noFirstIndex) {\n    var result = name,\n      items = drawComp.getItems(),\n      index = 1,\n      firstIndex = !noFirstIndex;\n    nameMap = {};\n    Wb.each(items, function(item) {\n      if (item.isNode)\n        nameMap[item.props.name] = 1;\n    });\n    while (true) {\n      if (firstIndex)\n        result = name + index;\n      if (!nameMap[result])\n        return result;\n      if (noFirstIndex)\n        result = name + index;\n      index++;\n    }\n  },\n  // 名称验证器\n  nameValidator: function(value) {\n    var found = false,\n      drawComp = app.getDrawComp(),\n      items = drawComp.getItems(),\n      selItem = drawComp.getSelection();\n\n    if (selItem.length > 1)\n      return '不能对多个节点设置相同的名称';\n    selItem = selItem[0];\n    Wb.each(items, function(item) {\n      if (item.isNode && item.props.name == value && item != selItem) {\n        found = true;\n        return false;\n      }\n    });\n    if (found)\n      return '名称 \"' + value + '\" 重复';\n    else\n      return true;\n  },\n  //节点选择变化事件\n  selectionchange: function() {\n    app.loadProperties(this.getSelection());\n  },\n  //加载流程或节点中的属性至属性编辑器。\n  loadProperties: function(nodes) {\n    var rows = [],\n      hasPath, hasNode, hasFlow,\n      cfg, value, propValue;\n    app.editPlugin.completeEdit();\n    if (!nodes || !nodes.length) {\n      //流程属性\n      nodes = [app.getDrawComp()];\n    }\n    cfg = app.sourceConfig();\n    Wb.each(cfg, function(k, v) {\n      //节点和连线属性\n      value = null;\n      Wb.each(nodes, function(node) {\n        if (node.isPath)\n          hasPath = true;\n        if (node.isNode)\n          hasNode = true;\n        if (node.isFlow)\n          hasFlow = true;\n        propValue = node.props[k];\n        if (value !== null && value !== propValue) {\n          value = null;\n          return false;\n        }\n        value = propValue;\n      });\n      if (hasPath && (Wb.indexOf(app.pathKeys, k) == -1))\n        return;\n      if (hasNode && (Wb.indexOf(app.nodeKeys, k) == -1))\n        return;\n      if (hasFlow && (Wb.indexOf(app.flowKeys, k) == -1))\n        return;\n      rows.push({\n        type: v.isProp ? '2 属性' : '1 外观',\n        name: k,\n        value: Wb.isValue(value) ? value : ''\n      });\n    });\n    app.property1.store.loadData(rows);\n  },\n  //数据源配置\n  sourceConfig: function() {\n    return {\n      type: {\n        displayName: '样式',\n        isProp: false,\n        editor: app.enumEditor(['默认', '开始', '结束', '主要', '信息', '警告', '危险'])\n      },\n      beeline: {\n        displayName: '使用直线',\n        isProp: false,\n        editor: app.boolEditor()\n      },\n      color: {\n        displayName: '字体色',\n        isProp: false,\n        editor: app.colorEditor()\n      },\n      fontSize: {\n        displayName: '字体大小',\n        isProp: false,\n        editor: app.intEditor()\n      },\n      backColor: {\n        displayName: '背景色',\n        isProp: false,\n        editor: app.colorEditor()\n      },\n      iconCls: {\n        displayName: '图标',\n        isProp: false,\n        editor: app.iconEditor()\n      },\n      name: {\n        displayName: '名称',\n        isProp: true,\n        editor: app.stringEditor({\n          allowBlank: false,\n          validator: app.nameValidator\n        })\n      },\n      lineTitle: {\n        displayName: '标题',\n        isProp: true,\n        editor: app.stringEditor()\n      },\n      condition: {\n        displayName: '条件',\n        isProp: true,\n        editor: app.scriptEditor()\n      },\n      doUser: {\n        displayName: '处理人员',\n        isProp: true,\n        editor: app.userEditor(false)\n      },\n      ccUser: {\n        displayName: '抄送人员',\n        isProp: true,\n        editor: app.userEditor(true)\n      },\n      passUsers: {\n        displayName: '通过人数',\n        isProp: true,\n        editor: app.stringEditor()\n      },\n      actionType: {\n        displayName: '动作类型',\n        isProp: true,\n        editor: app.actionEditor()\n      },\n      dialog: {\n        displayName: '处理对话框',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      viewDialog: {\n        displayName: '查看对话框',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      minWidth: {\n        displayName: '按钮宽度',\n        isProp: true,\n        editor: app.intEditor({\n          step: 10\n        })\n      },\n      nodeTitle: {\n        displayName: '标题',\n        isProp: true,\n        editor: app.stringEditor()\n      },\n      flowName: {\n        displayName: '流程名称',\n        isProp: true,\n        editor: app.stringEditor()\n      },\n      defaultDialog: {\n        displayName: '处理对话框',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      defaultViewDialog: {\n        displayName: '查看对话框',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      beforeModule: {\n        displayName: '前置模块',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      afterModule: {\n        displayName: '后置模块',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      finalModule: {\n        displayName: '最后模块',\n        isProp: true,\n        editor: app.moduleEditor()\n      },\n      defaultMinWidth: {\n        displayName: '按钮宽度',\n        isProp: true,\n        editor: app.intEditor({\n          step: 10\n        })\n      },\n      remark: {\n        displayName: '备注',\n        isProp: true,\n        editor: app.stringEditor()\n      }\n    };\n  },\n  //显示动作窗口\n  showAction: function(callback, value) {\n    var rows, names;\n    app.actionWin.show();\n    app.actionWinCallback = callback;\n    if (value) {\n      rows = Wb.decode(value);\n      names = {};\n      Wb.each(rows, function(item) {\n        names[item.name] = 1;\n      });\n      Wb.each(app.actionData, function(item) {\n        if (!names[item.name])\n          rows.push(item);\n      });\n    } else {\n      rows = app.actionData;\n    }\n    app.actionStore.loadData(rows);\n  },\n  //整数编辑器\n  intEditor: function(config) {\n    return Wb.apply({\n        xtype: 'numberfield',\n        allowDecimals: false,\n        minValue: 1,\n        listeners: {\n          change: app.notifyChange\n        }\n      },\n      config);\n  },\n  //枚举编辑器\n  enumEditor: function(list, config) {\n    return Wb.apply({\n      xtype: 'combo',\n      store: list,\n      forceSelection: true,\n      listeners: {\n        change: app.notifyChange\n      }\n    }, config);\n  },\n  //枚举编辑器\n  boolEditor: function(list) {\n    return app.enumEditor([true, false]);\n  },\n  //文本编辑器\n  stringEditor: function(config) {\n    return Wb.apply({\n      xtype: 'textfield',\n      listeners: {\n        change: app.notifyChange\n      }\n    }, config);\n  },\n  //人员选择器\n  userEditor: function(isCc) {\n    return {\n      xtype: 'trigger',\n      editable: false,\n      fieldCls: 'wb-disabled x-form-field',\n      triggerCls: 'x-form-ellipsis-trigger',\n      onTriggerClick: function() {\n        var rec = app.editPlugin.activeRecord;\n        Wb.run({\n          url: 'mixed-selector',\n          single: true,\n          success: function(scope) {\n            scope.show(function(data, win) {\n              Wb.update(rec, {\n                value: Wb.isEmpty(data) ? '' : Wb.encode(data)\n              });\n              app.setChanged();\n              win.close();\n            }, {\n              title: isCc ? '抄送人员选择' : '处理人员选择',\n              data: Wb.decode(rec.data.value)\n            });\n          }\n        });\n      }\n    };\n  },\n  //脚本编辑器\n  scriptEditor: function() {\n    return {\n      xtype: 'combo',\n      editable: false,\n      fieldCls: 'wb-disabled x-form-field',\n      triggerCls: 'x-form-ellipsis-trigger',\n      useMultiLine: true,\n      onTriggerClick: function() {\n        var rec = app.editPlugin.activeRecord;\n        Wb.run({\n          url: 'script-win',\n          single: 'js-script-win',\n          success: function(scope) {\n            scope.show(function(script, win) {\n              Wb.update(rec, {\n                value: script\n              });\n              app.setChanged();\n              win.close();\n            }, {\n              title: '条件设置',\n              script: rec.data.value\n            });\n          }\n        });\n      },\n      listeners: {\n        change: app.notifyChange\n      }\n    };\n  },\n  //动作选择器\n  actionEditor: function() {\n    return {\n      xtype: 'combo',\n      editable: false,\n      fieldCls: 'wb-disabled x-form-field',\n      triggerCls: 'x-form-ellipsis-trigger',\n      useMultiLine: true,\n      onTriggerClick: function() {\n        var rec = app.editPlugin.activeRecord;\n        app.showAction(function(value, win) {\n          Wb.update(rec, {\n            value: value\n          });\n          app.setChanged();\n          win.close();\n        }, rec.data.value);\n      },\n      listeners: {\n        change: app.notifyChange\n      }\n    };\n  },\n  //模块选择器\n  moduleEditor: function() {\n    return {\n      xtype: 'trigger',\n      triggerCls: 'x-form-ellipsis-trigger',\n      onTriggerClick: function() {\n        var rec = app.editPlugin.activeRecord;\n        app.editPlugin.completeEdit();\n        Wb.run({\n          url: 'module-selector',\n          single: true,\n          success: function(scope) {\n            scope.show(function(value, win) {\n              Wb.update(rec, {\n                value: value\n              });\n              app.setChanged();\n              win.close();\n            });\n          }\n        });\n      },\n      listeners: {\n        change: app.notifyChange\n      }\n    };\n  },\n  //颜色编辑器\n  colorEditor: function() {\n    return {\n      xtype: 'colorfield',\n      listeners: {\n        change: app.notifyChange\n      }\n    };\n  },\n  //图标编辑器\n  iconEditor: function(addListener) {\n    var config = {\n      xtype: 'combo',\n      store: app.iconData,\n      anyMatch: true,\n      forceSelection: true,\n      tpl: [\n        '<div><tpl for=\".\">',\n        '<div class=\"x-boundlist-item wb_thumb\" data-qtip=\"{field1}\"><div class=\"wb_icon1 {field1}_icon\"><\/div><\/div>',\n        '<\/tpl><\/div>'\n      ],\n      listeners: {\n        blur: function() {\n          var a = 11;\n        }\n      }\n    };\n    if (Wb.getBool(addListener, true)) {\n      config.listeners = {\n        change: app.notifyChange\n      };\n    }\n    return config;\n  },\n  //设置选择控件的样式\n  setValue: function(name, value, commit) {\n    var drawComp = app.getDrawComp(),\n      sels = app.getSelection();\n    if (!sels.length)\n      sels = [drawComp];\n    if (sels.length > 1 && name == 'name')\n      return;\n    Wb.each(sels, function(item) {\n      if (commit)\n        item.props[name] = value;\n      switch (name) {\n        case 'color':\n          item.label.attr({\n            fill: value,\n            'fill-opacity': null\n          });\n          break;\n        case 'fontSize':\n          item.label.attr({\n            'font-size': parseInt(value, 10)\n          });\n          break;\n        case 'backColor':\n          if (item.isNode)\n            item.rect.attr({\n              fill: value,\n              'fill-opacity': null\n            });\n          else if (item.isPath)\n            item.attr({\n              stroke: value,\n              'fill-opacity': null\n            });\n          else\n            item.body.setStyle('background-color', value);\n          break;\n        case 'iconCls':\n          if (value && Wb.indexOf(app.iconData, value) == -1)\n            return;\n          item.image.attr({\n            src: 'wb/images/' + (value || 'null') + '.png'\n          });\n          if (item.isPath)\n            drawComp.adjustLabelIconPos(item);\n          break;\n        case 'name':\n        case 'lineTitle':\n          item.label.attr({\n            text: value\n          });\n          break;\n        case 'width':\n          if (item.isFlow)\n            item.setWidth(parseInt(value, 10));\n          break;\n        case 'height':\n          if (item.isFlow)\n            item.setHeight(parseInt(value, 10));\n          break;\n        case 'type':\n          var color, backColor, iconCls, label;\n          switch (value) {\n            case '默认':\n              color = '#000';\n              backColor = '#eee';\n              break;\n            case '开始':\n              color = '#fff';\n              backColor = '#5ccb41';\n              label = '开始';\n              break;\n            case '结束':\n              color = '#fff';\n              backColor = '#de2922';\n              label = '结束';\n              break;\n            case '主要':\n              color = '#fff';\n              backColor = '#337ab7';\n              break;\n            case '信息':\n              color = '#fff';\n              backColor = '#5bc0de';\n              break;\n            case '警告':\n              color = '#fff';\n              backColor = '#f0ad4e';\n              break;\n            case '危险':\n              color = '#fff';\n              backColor = '#d9534f';\n              break;\n          }\n          if (color)\n            app.setProperty('color', color);\n          if (backColor)\n            app.setProperty('backColor', backColor);\n          if (iconCls)\n            app.setProperty('iconCls', iconCls);\n          if (label) {\n            if (app.nameValidator(label) === true)\n              app.setProperty('name', label);\n          }\n          break;\n        case 'beeline':\n          item.props.beeline = value;\n          drawComp.reloadPath(item);\n          break;\n      }\n    });\n  },\n  //设置属性值\n  setProperty: function(name, value) {\n    var rec = app.property1.store.findExactRec('name', name);\n    if (rec) {\n      Wb.update(rec, {\n        value: value\n      });\n      app.setValue(name, value, true);\n    }\n  },\n  //属性编辑器change事件\n  notifyChange: function(field, value) {\n    if (!field.isValid())\n      return;\n    var rec = app.editPlugin.activeRecord;\n    if (rec)\n      app.setValue(rec.data.name, value);\n    app.setChanged();\n  },\n  //设置当前模块已经被修改标记\n  setChanged: function() {\n    if (!app.stopSetChanged)\n      Wb.setModified(app.tab1.getActiveTab());\n  },\n  //属性编辑器取消值时的事件\n  propertyCancelEdit: function(e, context) {\n    app.setValue(context.record.data.name, context.originalValue);\n  },\n  //加载流程\n  loadFlow: function(filename, data) {\n    var flowProps = Wb.apply({\n        backColor: '#fff',\n        autoScroll: false,\n        showGrid: true\n      }, data ? data.flow : null),\n      card = app.tab1.add({\n        title: Wb.getFilename(filename),\n        iconCls: 'workflow_icon',\n        closable: true,\n        filename: filename,\n        autoScroll: flowProps.autoScroll,\n        tabConfig: {\n          tooltip: filename.substring(app.basePathLen)\n        },\n        listeners: {\n          beforeclose: function(card) {\n            if (card.isModified) {\n              Wb.choose('\"' + Wb.getFilename(card.filename) + '\" 已经被修改，保存所做的更改吗？',\n                function(btn) {\n                  if (btn == 'yes')\n                    app.doSave(false, function() {\n                      card.close();\n                    });\n                  else if (btn == 'no') {\n                    Wb.unModified(card);\n                    card.close();\n                  }\n                });\n              return false;\n            }\n          },\n          close: function() {\n            app.property1.store.loadData([]);\n          }\n        },\n        items: {\n          xtype: 'drawcomp',\n          props: flowProps,\n          width: 5000,\n          height: 5000,\n          isFlow: true,\n          bodyStyle: 'background-image:' + (flowProps.showGrid ? 'url(wb/images/app/dot.png)' : 'none') +\n            ';background-color:' + flowProps.backColor + ';',\n          listeners: {\n            mousedown: app.mouseDown,\n            beforemouseDown: app.beforeMouseDown,\n            mouseup: app.mouseUp,\n            changed: app.setChanged,\n            selectionchange: app.selectionchange\n          }\n        }\n      });\n    card.drawComp = card.down('drawcomp');\n    app.tab1.setActiveTab(card);\n    app.stopSetChanged = true;\n    card.drawComp.load(data);\n    app.stopSetChanged = false;\n  },\n  /**\n   * 打开对话框，设置资源文件/目录的权限。\n   */\n  setPerm: function() {\n    var subTitle, rec, fileNames = app.xwl1.getFileNames(true, true);\n    if (!fileNames.length) {\n      Wb.warn('请选择至少1个需要设置的文件/目录。');\n      return;\n    }\n    app.fileNames = fileNames;\n    Wb.setTitle(app.permWin, Wb.getInfo(fileNames, Wb.getFilename(fileNames[0])));\n    if (fileNames.length == 1 && app.xwl1.fileGrid.getSelection()[0].data.leaf) {\n      Wb.request({\n        url: 'm?xwl=my/flow/get-perm',\n        params: {\n          fileName: fileNames[0]\n        },\n        success: function(resp) {\n          app.perms = Wb.decode(resp.responseText);\n          app.permWin.show();\n          Wb.setValue(app.permWin, app.perms);\n        }\n      });\n    } else {\n      app.perms = {};\n      app.permWin.show();\n    }\n  },\n  //新建文件\n  addFile: function() {\n    app.fileDialog.addFile(function(filenames, win) {\n      Wb.request({\n        url: 'm?xwl=dev/flow/add-file',\n        params: {\n          path: Wb.getPath(filenames),\n          name: Wb.getFilename(filenames)\n        },\n        success: function(resp) {\n          app.loadFlow(filenames);\n          win.close();\n        }\n      });\n    }, app.fileExt);\n  },\n  //打开文件\n  open: function() {\n    app.fileDialog.open(function(fs, win) {\n      var card, filenames = [];\n      Wb.each(fs, function(file) {\n        card = app.tab1.down('[filename=' + file + ']');\n        if (card)\n          app.tab1.setActiveTab(card);\n        else\n          filenames.push(file);\n      });\n      Wb.request({\n        url: 'm?xwl=dev/flow/open',\n        params: {\n          filenames: filenames\n        },\n        success: function(resp) {\n          var items = Wb.decode(resp.responseText);\n          Wb.each(items, function(item) {\n            app.loadFlow(item.file, Wb.decode(item.data));\n          });\n          win.close();\n        }\n      });\n    }, app.fileExt);\n  },\n  //另存为\n  saveAs: function() {\n    var card = app.tab1.getActiveTab();\n    if (!card) return;\n    app.fileDialog.saveAs(function(filenames, win) {\n      Wb.request({\n        url: 'm?xwl=dev/flow/add-file',\n        params: {\n          path: Wb.getPath(filenames),\n          name: Wb.getFilename(filenames),\n          content: card.drawComp.getData()\n        },\n        success: function(resp) {\n          card.setTitle(Wb.getFilename(filenames));\n          card.filename = filenames;\n          win.close();\n        }\n      });\n    }, app.fileExt);\n  },\n  //保存文件\n  doSave: function(isAll, callback) {\n    var data = [],\n      activeCard = app.tab1.getActiveTab();\n    app.editPlugin.completeEdit();\n    app.tab1.items.each(function(item) {\n      if (item.isModified && (isAll || item == activeCard)) {\n        data.push({\n          file: item.filename,\n          data: item.drawComp.getData()\n        });\n      }\n    });\n    if (!data.length) return;\n    Wb.request({\n      url: 'm?xwl=dev/flow/save',\n      params: {\n        data: data\n      },\n      success: function(resp) {\n        app.tab1.items.each(function(item) {\n          if (item.isModified && (isAll || item == activeCard)) {\n            Wb.unModified(item);\n          }\n        });\n        Ext.callback(callback);\n      }\n    });\n  },\n  //保存事件句柄\n  save: function() {\n    app.doSave();\n  },\n  //保存全部事件句柄\n  saveAll: function() {\n    app.doSave(true);\n  },\n  //关闭标签页\n  doClose: function(withoutCard) {\n    Ext.suspendLayouts();\n    app.tab1.items.each(function(card) {\n      if (card == withoutCard)\n        return;\n      if (card.isModified) {\n        app.tab1.setActiveTab(card);\n        Wb.choose('\"' + Wb.getFilename(card.filename) + '\" 已经被修改，保存所做的更改吗？',\n          function(btn) {\n            if (btn == 'yes')\n              app.doSave(false, function() {\n                app.doClose(withoutCard);\n              });\n            else if (btn == 'no') {\n              Wb.unModified(card);\n              app.doClose(withoutCard);\n            }\n          });\n        return false;\n      } else\n        card.close();\n    });\n    Ext.resumeLayouts(true);\n  },\n  //剪切或复制节点\n  cutCopy: function(isCopy) {\n    var drawComp = app.getDrawComp();\n    if (drawComp) {\n      app.clipBoard = drawComp.getData(true);\n      if (!isCopy)\n        drawComp.removeSelection();\n    }\n  },\n  //剪切节点\n  cutNodes: function() {\n    app.cutCopy();\n  },\n  //复制节点\n  copyNodes: function() {\n    app.cutCopy(true);\n  },\n  //粘贴节点\n  pasteNodes: function() {\n    if (app.clipBoard && app.clipBoard.nodes.length) {\n      var nodes, oldName, newName, cloneClipBoard, addOffset, cx, cy, renamedMap = {},\n        drawComp = app.getDrawComp();\n      if (drawComp) {\n        cloneClipBoard = Ext.clone(app.clipBoard);\n        Wb.each(cloneClipBoard.nodes, function(node) {\n          oldName = node.name;\n          node.name = app.uniqueName(drawComp, oldName, true);\n          renamedMap[oldName] = node.name;\n        });\n        Wb.each(cloneClipBoard.links, function(link) {\n          link.name = app.uniqueName(drawComp, link.name, true);\n          newName = renamedMap[link.from];\n          if (newName)\n            link.from = newName;\n          newName = renamedMap[link.to];\n          if (newName)\n            link.to = newName;\n        });\n        cx = cloneClipBoard.nodes[0].x;\n        cy = cloneClipBoard.nodes[0].y;\n        Wb.each(drawComp.getItems(), function(item) {\n          if (item.isNode && item.props.x == cx && item.props.y == cy) {\n            addOffset = true;\n            return false;\n          }\n        });\n        nodes = drawComp.load(cloneClipBoard, addOffset ? 32 : 0);\n        drawComp.setSelection(nodes);\n      }\n    }\n  },\n  //全选\n  selectAll: function() {\n    var drawComp = app.getDrawComp();\n    if (drawComp)\n      drawComp.selectAll();\n  }\n});"}}],"roles":{},"title":"流程设计","iconCls":"workflow_icon","inframe":false,"pageLink":""}