{"hidden":true,"children":[{"configs":{"itemId":"module","loginRequired":"false"},"expanded":true,"children":[{"configs":{"layout":"fit","itemId":"frameContainer","margin":"0 1 0 0","cls":"wb_frame"},"expanded":true,"children":[{"configs":{"itemId":"container"},"expanded":false,"children":[],"type":"container","events":{"afterrender":"if (window.CodeMirror)\n  app.renderEditor();\nelse {\n  Wb.addLink(['wb/libs/cm/cmirror{#debugSuffix#}.css', 'wb/libs/cm/cmirror{#debugSuffix#}.js'],\n    app.renderEditor\n  );\n}"}}],"type":"container"}],"type":"module","events":{"initialize":"var optionParams = '{#optionParams#}';\nif (optionParams)\n  contextOptions = Wb.decode(optionParams);\nWb.apply(app, {\n  type: contextOptions.type || 'js', //脚本编辑器类型\n  readOnly: contextOptions.readOnly || false, //是否只读,\n  bind: contextOptions.bind, //是否绑定getValue/setValue方法到上级容器控件\n  initFocus: contextOptions.focus, //是否设置焦点\n  /**\n   * 设置脚本编辑器中的脚本内容。\n   * @param {String} value 脚本内容。\n   */\n  setValue: function(value) {\n    if (app.editor)\n      app.editor.setValue(value || '');\n    else\n      app.initValue = value;\n  },\n  /**\n   * 获得脚本编辑器中的脚本内容。\n   * @return {String} 脚本编辑器的内容。\n   */\n  getValue: function() {\n    if (app.editor)\n      return app.editor.getValue();\n    else\n      return app.initValue;\n  },\n  /** @property {Function} onChange 编辑器change执行的事件 */\n  /**\n   * 设置编辑器的焦点。\n   */\n  focus: function() {\n    if (app.editor)\n      setTimeout(function() {\n        app.editor.focus();\n      }, 10);\n    else\n      app.initFocus = true;\n  },\n  adjustEditorSize: function(comp, width, height) {\n    if (app.editor && !comp.destroying) {\n      Ext.fly(app.editor.getScrollerElement()).setHeight(height);\n      app.editor.refresh();\n    }\n  },\n  renderEditor: function() {\n    var comp = app.container;\n    comp.update('<textarea><\/textarea>');\n    app.editor = CodeMirror.fromTextArea(comp.el.down('textarea', true), app.getConfig());\n    app.editor.setOption('readOnly', app.readOnly);\n    if (app.bind) {\n      app.frameContainer.ownerCt.getValue = app.getValue;\n      app.frameContainer.ownerCt.setValue = app.setValue;\n    }\n    app.adjustEditorSize(app.container, app.container.getWidth(), app.container.getHeight());\n    comp.mon(comp, 'resize', app.adjustEditorSize);\n    if (app.initValue)\n      app.setValue(app.initValue);\n    app.editor.on('change', function(doc) {\n      Ext.callback(app.onChange, doc, [doc]);\n    });\n    if (app.initFocus)\n      app.focus();\n  },\n  getConfig: function() {\n    var config, extConfig;\n    config = {\n      lineNumbers: true,\n      mode: 'text/javascript',\n      theme: Wb.editTheme,\n      extraKeys: {\n        'Ctrl-/': 'toggleComment',\n        'Ctrl-,': function(doc) {\n          if (doc.modifyCursor)\n            doc.setCursor(doc.modifyCursor);\n        },\n        'Shift-Ctrl-F': function(doc) {\n          if (doc.options.readOnly)\n            return;\n          var cursor = doc.getCursor(),\n            scroll = doc.getScrollInfo();\n          doc.autoFormatRange({\n            line: 0,\n            ch: 0\n          }, {\n            line: Number.MAX_VALUE,\n            ch: Number.MAX_VALUE\n          });\n          doc.scrollTo(scroll.left, scroll.top);\n          doc.setCursor(cursor);\n        }\n      }\n    };\n    switch (app.type) {\n      case 'js':\n      case 'ss':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        config.extraKeys['Alt-/'] = 'autocomplete';\n        config.extraKeys['.'] = function(doc) {\n          if (doc.options.readOnly)\n            return;\n          doc.replaceSelection('.');\n          if (doc.hintTimer)\n            clearTimeout(doc.hintTimer);\n          doc.hintTimer = setTimeout(function() {\n            CodeMirror.showHint(doc);\n          }, 100);\n        };\n        extConfig = {\n          mode: {\n            name: 'text/javascript',\n            globalVars: true\n          },\n          gutters: ['CodeMirror-lint-markers'],\n          lint: true,\n          matchBrackets: true\n        };\n        break;\n      case 'css':\n        extConfig = {\n          mode: 'text/css',\n          gutters: ['CodeMirror-lint-markers'],\n          lint: true,\n          matchBrackets: true\n        };\n        break;\n      case 'java':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        extConfig = {\n          mode: 'text/x-java',\n          matchBrackets: true\n        };\n        break;\n      case 'xml':\n        extConfig = {\n          mode: 'application/xml',\n          matchBrackets: true\n        };\n        break;\n      case 'html':\n      case 'htm':\n        extConfig = {\n          mode: 'htmlmixed',\n          matchBrackets: true\n        };\n        break;\n      case 'jsp':\n      case 'jspx':\n        config.highlightSelectionMatches = {\n          showToken: /\\w/\n        };\n        extConfig = {\n          mode: 'application/x-jsp',\n          matchBrackets: true\n        };\n        break;\n      case 'json':\n      case 'xwl':\n      case 'expjson':\n        extConfig = {\n          mode: 'application/json',\n          gutters: ['CodeMirror-lint-markers'],\n          matchBrackets: true\n        };\n        break;\n      case 'sql':\n        extConfig = {\n          mode: 'text/x-sql',\n          matchBrackets: true\n        };\n        break;\n      default:\n        extConfig = {\n          mode: 'text/plain'\n        };\n    }\n    return Ext.apply(config, extConfig);\n  }\n});"}}],"roles":{},"title":"脚本编辑器","iconCls":"","inframe":false,"pageLink":""}