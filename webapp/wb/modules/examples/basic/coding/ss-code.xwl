{"hidden":false,"children":[{"configs":{"itemId":"module"},"expanded":true,"children":[{"configs":{"quoted":"true","itemId":"text","js":"(function() {\n  //访问Java类\n  var HashMap = Packages.java.util.HashMap; //访问Java类名以Packages.引导\n  HashMap = java.util.HashMap; //如果以com, edu, java, javafx, javax和org开头的包名可以省去Packages.前缀，因为系统已经预定义了这些全局对象\n  HashMap = Java.type('java.util.HashMap'); //通过Java.type来引用类，是建议使用的方法\n  var hashMap = new java.util.HashMap(); //通过完全的路径访问\n  hashMap = new HashMap(); //通过定义的HashMap变量来访问\n  hashMap.put('name', 'value'); //访问Java类的方法，向hashMap对象中添加值\n\n  //访问Java方法\n  var System = Java.type('java.lang.System'); //定义System变量指向java.lang.System类\n  System.out.println(10); //方法直接引用，等效于System.out['println'](10);\n  System.out['println(double)'](10); //方法使用中括号引用，并在方法中指定参数原型来引用同名的重载方法\n\n  //使用JavaBeans\n  var date = new java.util.Date(); //创建Java Date对象\n  year = date.year + 1900; //使用date.year替代date.getYear方法\n  date.year = 2014 - 1900; //设置date.year替代date.setYear方法\n\n  //Java数组的访问\n  var IntArray = Java.type('int[]'); //定义Java int 数组变量\n  var arr = new IntArray(10); //创建Java数组\n  var jsArr = ['a', 'b', 'c']; //定义js数组\n  var strArrType = Java.type('java.lang.String[]');\n  var javaArr = Java.to(jsArr); //使用Java.to方法把js数组转换为java Object[]数组\n  javaArr = Java.to(jsArr, strArrType); //使用Java.to方法把js数组转换为指定原型String[]的java数组\n\n  for (var i in javaArr) print(i); //遍历数组，打印索引i\n  Wb.each(javaArr, function(value) { //遍历数组，value为值\n    print(value); //在控制台打印值\n  });\n  jsArr = Java.from(arr); //把Java数组或List转换为js数组。通常js数组作为参数传入到java方法时系统会自动转换\n\n  //数字的访问\n  var intNum = 10; //Integer类型\n  var dblNum = Number(intNum); //Double类型\n\n  //日期的访问\n  var jsDate = new Date(); //JS日期\n  var javaDate = new JavaDate(); //Java日期，JavaDate=java.util.Date\n  javaDate = Wb.reverse(jsDate); //JS Date转换为Java Date\n  //在Date/JavaDate,Object/JSONObject,Array/JSONArray之间反转值类型建议使用Wb.reverse方法\n  javaDate = new JavaDate(jsDate.getTime()); //JS Date转换为Java Date\n  jsDate = Wb.reverse(javaDate); //Java Date转换为 JS Date\n  jsDate = Wb.createDate(javaDate.getTime()); //Java Date转换为 JS Date\n  jsDate = new Date(Number(javaDate.getTime())); //Java Date转换为 JS Date\n  var dateText = Wb.dateToStr(jsDate); //JS日期转换为字符串\n  jsDate = Wb.strToDate(dateText); //字符串转换为JS日期\n  dateText = DateUtil.dateToStr(javaDate); //Java日期转换为字符串\n  javaDate = DateUtil.strToDate(dateText); //字符串转换为Java日期\n  dateText = DateUtil.format(javaDate, 'yyyy-MM-dd HH:mm:ss'); //格式化Java日期\n  dateText = Wb.format(jsDate, 'yyyy-MM-dd HH:mm:ss'); //格式化JS或Java日期\n\n\n  //Java集合的访问\n  var ArrayList = java.util.ArrayList; //声明变量指向ArrayList\n  var alist = new ArrayList(); //创建ArrayList实例\n  alist.add(\"a\"); //添加值a\n  alist.add(\"b\"); //添加值b\n  alist.add(\"c\"); //添加值c\n  print(alist[1]); //打印第二项值\u201cb\u201d，alist[1]等效于alist.get(1)\n  alist.forEach(function(i) { //遍历alist对象\n    print(i); //打印每一项的值\n  });\n\n  var hm = new HashMap(); //创建HashMap实例\n  hm.put(\"name\", \"Bob\"); //添加名称为name值为Bob的项\n  hm.put(\"age\", 40); //添加名称为age值为40的项\n  hm.put(\"weight\", 180); //添加名称为weight值为180的项\n  hm.keySet().forEach(function(k) { //遍历键列表\n    print(k);\n  });\n  hm.values().forEach(function(v) { //遍历值列表\n    print(v);\n  });\n  hm.entrySet().forEach(function(e) { //遍历键值列表\n    print(e.key + '=' + e.value);\n  });\n\n  //Java类扩展\n  var Run = Java.type(\"java.lang.Runnable\");\n  var MyRun = Java.extend(Run, { //扩展Runnable类\n    run: function() {\n      print(\"Run in separate thread\");\n    }\n  });\n\n  var Thread = Java.type(\"java.lang.Thread\");\n  var th = new Thread(new MyRun()); //创建线程类实例\n\n  //JSON处理\n  var encodedText, javaObject, javaArray, jsObject = {\n      a: 'foo',\n      b: new Date(),\n      c: 123\n    },\n    jsArray = ['abc', 123, new Date()];\n\n  encodedText = Wb.encode(jsObject); //把JSON对象转换为字符串\n  jsObject = Wb.decode(encodedText); //把字符串转换成JSON对象\n  javaObject = new JSONObject(encodedText); //把字符串转换为Java JSONObject\n  encodedText = javaObject.toString(); //把Java JSONObject 转换为 String\n  jsObject = Wb.decode(encodedText); //把String转换为JSON对象\n\n  encodedText = Wb.encode(jsArray); //把JSON数组转换为字符串\n  jsArray = Wb.decode(encodedText); //把字符串转换成JSON数组\n  javaArray = new JSONArray(encodedText); //把字符串转换为Java JSONArray\n  encodedText = javaArray.toString(); //把Java JSONArray 转换为 String\n  javaArray = Wb.decode(encodedText); //把String转换为JSON数组\n\n  javaArray = Wb.reverse(jsArray); //jsArray转Java JSONArray\n  jsArray = Wb.reverse(javaArray); //Java JSONArray转jsArray\n  javaObject = Wb.reverse(jsObject); //js Object转Java JSONObject\n  jsObject = Wb.reverse(javaObject); //Java JSONObject转js Object\n\n  //调用方法的名称为关键字\n  //obj.new()改为obj['new']();\n  //file.delete()改为file['delete']();\n  //所有关键字名称的方法均需按上述方法调用\n\n  //异常处理\n  try {\n    //throw 'error'; //抛出异常\n  } catch (e) {\n    //     if (e instanceof java.lang.RuntimeException) 判断具体的异常类型并作进一步处理\n    //       throw e;   \n  } finally {\n    //进行一些处理\n  }\n\n  //导入包\n  //   var imports = new JavaImporter(java.util, java.lang);\n  //   with(imports) {//不建议使用，建议通过全路径引用类\n  //     var map = new HashMap();\n  //     System.out.println(map.toString());\n  //   }\n\n  //加载js文件\n  //load('urlOrFile');//URL地址或文件名\n\n  //发送数据到客户端\n  //使用app.send发送数据将立即进行提交，因此后续发送的数据将不再被发送\n  //app.send('text');\n  //app.send({foo:bar});\n  //app.send(anyObject);\n  //response.getWriter().print('sdf');使用传统的方法输出脚本，必须使用response.flushBuffer();进行立即提交\n\n  //参数获取和设置\n  //var jsonObject=app.get();获取所有的request parameter/attribute和session attribute值\n  //var myParm=app.get('myParam');获取指定名称的request parameter/attribute和session attribute值\n  //app.set({foo:'bar',abc:123});//把对象中的值设置到request的attribute\n})();"},"expanded":false,"children":[],"type":"string"},{"configs":{"layout":"fit","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"itemId":"xwl1","file":"m?xwl=sys/tool/dev/script-editor","params":"{\n  readOnly: true\n}"},"expanded":false,"children":[],"type":"xwl"}],"type":"viewport","events":{"afterrender":"app.xwl1.setValue(\"{#text#}\");"}}],"type":"module"}],"roles":{},"title":"服务端代码","iconCls":"","inframe":false,"pageLink":""}