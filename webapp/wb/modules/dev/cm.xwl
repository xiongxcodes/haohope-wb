{"hidden":false,"children":[{"configs":{"itemId":"module","logMessage":"控件管理"},"expanded":true,"children":[{"configs":{"layout":"border","itemId":"viewport1"},"expanded":true,"children":[{"configs":{"border":"false","itemId":"toolbar1","enableOverflow":"true","region":"north"},"expanded":true,"children":[{"configs":{"itemId":"controlMenu","minWidth":"200","text":"控件管理"},"expanded":false,"children":[{"configs":{"itemId":"addBtn","text":"添加控件<span class=\"wb_right\">Ctrl+Shift+J<\/span>","iconCls":"db_field_add_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.addControl();"}},{"configs":{"itemId":"addFolderBtn","text":"添加目录","iconCls":"folder_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.addControl(true);"}},{"configs":{"itemId":"openBtn","handler":"app.editControl","text":"打开控件","iconCls":"db_field_edit_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"deleteBtn","handler":"app.deleteControl","text":"删除控件","iconCls":"db_field_delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"line1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"copyBtn","handler":"app.copyControl","text":"复制控件..."},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"renameBtn","handler":"app.rename","text":"修改目录名称...","iconCls":"edit_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"line2","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"closeAllBtn","handler":"app.closeAll","text":"关闭全部"},"expanded":false,"children":[],"type":"item"}],"type":"item"},{"configs":{"itemId":"saveBtn","tooltip":"保存当前编辑的控件 (Ctrl+S)","text":"保存当前","iconCls":"save_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.saveControls();"}},{"configs":{"itemId":"saveAllBtn","tooltip":"保存全部编辑的控件 (Ctrl+Shift+S)","text":"保存全部","iconCls":"save_all_icon"},"expanded":false,"children":[],"type":"item","events":{"click":"app.saveControls(true);"}},{"configs":{"itemId":"line1","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"addItemBtn","handler":"app.addItem","tooltip":"在当前页面添加新的条目 (Ctrl+E)","text":"添加条目","iconCls":"table_add_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"editItemBtn","handler":"app.editItem","tooltip":"修改选择的条目","text":"修改条目","iconCls":"table_edit_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"deleteItemBtn","handler":"app.deleteItem","tooltip":"删除选择的条目","text":"删除条目","iconCls":"table_delete_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"line2","text":"-"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"copyItemsBtn","handler":"app.copyItems","tooltip":"复制当前控件所有条目","text":"复制条目","iconCls":"copy_icon"},"expanded":false,"children":[],"type":"item"},{"configs":{"itemId":"pasteItemsBtn","handler":"app.pasteItems","tooltip":"把条目粘贴到当前控件","text":"粘贴条目","iconCls":"paste_icon"},"expanded":false,"children":[],"type":"item"}],"type":"toolbar"},{"configs":{"itemId":"controlTree","split":"true","root":"{\n  text: '全部',\n  expanded: true\n}","width":"240","viewConfig":"{\n  plugins: {\n    ptype: 'treeviewdragdrop'\n  },\n  listeners: {\n    beforedrop: function(node, data, om, dp, dh) {\n      var sels = Wb.reverse(data.records),\n        nodes = [];\n      Wb.each(sels, function(n) {\n        nodes.push(n.data.id);\n      });\n      dh.wait = true;\n      Wb.request({\n        url: 'm?xwl=dev/cm/move',\n        params: {\n          sourceNodes: Wb.encode(nodes),\n          destNode: om.data.id,\n          dropPosition: dp\n        },\n        callback: function(a, succ) {\n          if (succ)\n            dh.processDrop();\n          else\n            dh.cancelDrop();\n        }\n      });\n    }\n  }\n}","region":"west","title":"控件箱","iconCls":"tool_icon","tools":"Wb.getTreeTools({search:true})","collapsible":"true","multiSelect":"true"},"expanded":true,"children":[{"configs":{"itemId":"store","fields":"['id', 'text', 'control', 'general', 'configs', 'events']","url":"m?xwl=dev/cm/get-tree"},"expanded":false,"children":[],"type":"treestore"}],"type":"tree","events":{"selectionchange":"app.setButtons();","itemdblclick":"if (record.isLeaf())\n  app.editControl();"}},{"configs":{"itemId":"controlTab","plugins":"['tabreorderer', 'tabclosemenu']","region":"center"},"expanded":false,"children":[],"type":"tab","events":{"tabchange":"app.activeCard = newCard;\napp.setButtons();","remove":"if (tab.items.length === 0)\n  app.activeCard = null;\napp.setButtons();"}}],"type":"viewport","events":{"afterrender":"app.setButtons();\napp.navKey = new Ext.KeyNav({\n  viewport: app.viewport1,\n  E: {\n    ctrl: true,\n    fn: function(e) {\n      if (e.shiftKey)\n        app.addControl();\n      else\n        app.addItem();\n    }\n  },\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      app.saveControls(e.shiftKey);\n    }\n  }\n});"}}],"type":"module","events":{"beforeunload":"var title = Wb.getModifiedTitle(app.controlTab, true);\nif (title !== null)\n  return title + '已经被修改。';","initialize":"Ext.apply(app, {\n  //常规项\n  generalEnum: ['autoCreate', 'autoNames', 'class', 'container', 'design', 'designXtype',\n    'directOutput', 'handleText', 'height', 'hintType', 'iconCls', 'media', 'render',\n    'root', 'tag', 'type', 'width', 'xtype'\n  ],\n  //配置项\n  configsEnum: ['bind', 'color', 'enum', 'exp', 'expBind', 'expBool', 'expJson', 'glyph', 'html',\n    'iconCls', 'jndi', 'js', 'sql', 'ss', 'string', 'text', 'url', 'urlList'\n  ],\n  //事件\n  eventsEnum: ['expJson', 'js', 'ss'],\n  propertyChange: function() {\n    Wb.setModified(app.activeCard);\n    app.setButtons();\n  },\n  addControl: function(isFolder) {\n    var node = app.controlTree.getSelection()[0],\n      selNodeRef, selNode = '';\n    if (!node)\n      node = app.controlTree.getRootNode();\n    else if (node.isLeaf()) {\n      selNode = node.data.id;\n      selNodeRef = node;\n      node = node.parentNode;\n    }\n    Wb.prompt({\n      title: (isFolder ? '添加目录' : '添加') + ' - ' + node.data.text,\n      iconCls: isFolder ? 'folder_icon' : 'db_field_add_icon',\n      items: [{\n        fieldLabel: '名称',\n        validator: isFolder ? null : Wb.verifyName,\n        itemId: 'name',\n        allowBlank: false\n      }],\n      handler: function(values, win) {\n        Wb.request({\n          url: 'm?xwl=dev/cm/add',\n          params: Ext.apply({\n            parent: node.data.id,\n            selNode: selNode,\n            isFolder: isFolder\n          }, values),\n          success: function(resp) {\n            node.expand(false, function() {\n              var newNode, nodeExp;\n              if (isFolder)\n                nodeExp = {\n                  text: values.name,\n                  id: resp.responseText,\n                  children: []\n                };\n              else\n                nodeExp = {\n                  text: values.name,\n                  id: values.name,\n                  iconCls: 'item_icon',\n                  leaf: true\n                };\n              if (selNodeRef && selNodeRef.nextSibling)\n                newNode = node.insertBefore(nodeExp, selNodeRef.nextSibling);\n              else\n                newNode = node.appendChild(nodeExp);\n              newNode.commit();\n              app.controlTree.setSelection(newNode);\n              if (!isFolder)\n                app.editControl();\n              win.close();\n            });\n          }\n        });\n      }\n    });\n  },\n  saveControls: function(isAll, callback) {\n    if (isAll && app.saveAllBtn.disabled || !isAll && app.saveBtn.disabled) {\n      return;\n    }\n\n    function stringToJson(data) {\n      Wb.each(data, function(key, value) {\n        data[key] = Wb.decode(value);\n      });\n      return data;\n    }\n\n    function getGeneralData(data) {\n      Wb.each(data, function(key, value) {\n        if (Ext.String.startsWith(value, '{') || Ext.String.startsWith(value, '['))\n          data[key] = Wb.decode(value);\n        else if (value == 'true')\n          data[key] = true;\n        else if (value == 'false')\n          data[key] = false;\n      });\n      return data;\n    }\n\n    function getData(tab) {\n      var data = {};\n      data.general = getGeneralData(tab.getComponent('general').getSource());\n      data.id = tab.itemId;\n      data.text = tab.itemId;\n      data.iconCls = data.general.iconCls;\n      tab.pendIconCls = data.iconCls;\n      data.leaf = true;\n      data.configs = stringToJson(Ext.apply({}, tab.getComponent('configs').getSource()));\n      data.events = stringToJson(Ext.apply({}, tab.getComponent('events').getSource()));\n      return data;\n    }\n    var data = [];\n    app.activeCard.getActiveTab().findPlugin('cellediting').completeEdit();\n    app.controlTab.items.each(function(tab) {\n      if (tab.isModified && (isAll || tab == app.activeCard))\n        data.push({\n          id: tab.itemId,\n          data: getData(tab)\n        });\n    });\n    if (data.length === 0)\n      return;\n    Wb.request({\n      url: 'm?xwl=dev/cm/save',\n      jsonData: data,\n      success: function() {\n        var rootNode = app.controlTree.getRootNode();\n        app.controlTab.items.each(function(tab) {\n          if (tab.isModified && (isAll || tab == app.activeCard)) {\n            tab.setIconCls(tab.pendIconCls);\n            rootNode.findChild('id', tab.itemId, true).set('iconCls', tab.pendIconCls);\n            Wb.unModified(tab);\n          }\n        });\n        Ext.callback(callback);\n        app.setButtons();\n      }\n    });\n  },\n  createTrigger: function() {\n    return {\n      xtype: 'trigger',\n      triggerCls: 'x-form-ellipsis-trigger',\n      onTriggerClick: function() {\n        this.ownerCt.completeEdit();\n        app.editItem();\n      },\n      listeners: {\n        change: app.propertyChange\n      }\n    };\n  },\n  createConfig: function(data) {\n    var config = Ext.apply({}, data);\n    Wb.each(config, function(key, value) {\n      config[key] = {\n        editor: app.createTrigger()\n      };\n    });\n    return config;\n  },\n  editControl: function() {\n    var sels = app.controlTree.getSelection(),\n      controls, firstCard, card;\n    controls = [];\n    Wb.each(sels, function(control) {\n      if (control.isLeaf()) {\n        card = app.controlTab.getComponent(control.data.id);\n        if (!card)\n          controls.push(control.data.id);\n        else if (!firstCard)\n          firstCard = card;\n      }\n    });\n    if (controls.length === 0) {\n      if (firstCard)\n        app.controlTab.setActiveTab(firstCard);\n      else\n        Wb.warn('请选择至少一个需要打开的控件。');\n      return;\n    }\n\n    function getGeneralData(data) {\n      Wb.each(data, function(key, value) {\n        if (Ext.isObject(value) || Ext.isArray(value) || Ext.isBoolean(value))\n          data[key] = Wb.encode(value);\n      });\n      return data;\n    }\n\n    function jsonToString(data) {\n      Wb.each(data, function(key, value) {\n        data[key] = Wb.encode(value);\n      });\n      return data;\n    }\n    Wb.request({\n      url: 'm?xwl=dev/cm/open',\n      params: {\n        controls: Wb.encode(controls)\n      },\n      success: function(response) {\n        var data = Wb.decode(response.responseText);\n        Wb.each(data, function(control) {\n          card = app.controlTab.add({\n            xtype: 'tabpanel',\n            title: control.text,\n            iconCls: control.iconCls,\n            closable: true,\n            itemId: control.id,\n            listeners: {\n              tabchange: function(me, newCard) {\n                app.setButtons();\n              },\n              beforeclose: function(tab) {\n                if (tab.isModified) {\n                  Wb.choose('\"' + tab.itemId + '\" 已经被修改，保存所做的更改吗？',\n                    function(btn) {\n                      if (btn == 'yes')\n                        app.saveControls(false, function() {\n                          tab.close();\n                        });\n                      else if (btn == 'no') {\n                        Wb.unModified(tab);\n                        tab.close();\n                      }\n                    });\n                  return false;\n                }\n              }\n            },\n            items: [{\n              title: 'General',\n              iconCls: 'view_icon',\n              itemId: 'general',\n              xtype: 'propertygrid',\n              nameColumnWidth: 150,\n              source: getGeneralData(control.general),\n              sourceConfig: app.createConfig(control.general),\n              listeners: {\n                selectionchange: app.setButtons\n              }\n            }, {\n              title: 'Configs',\n              iconCls: 'property_icon',\n              itemId: 'configs',\n              xtype: 'propertygrid',\n              nameColumnWidth: 150,\n              source: jsonToString(control.configs),\n              sourceConfig: app.createConfig(control.configs),\n              listeners: {\n                selectionchange: app.setButtons\n              }\n            }, {\n              title: 'Events',\n              iconCls: 'execute_icon',\n              itemId: 'events',\n              xtype: 'propertygrid',\n              nameColumnWidth: 150,\n              source: jsonToString(control.events),\n              sourceConfig: app.createConfig(control.events),\n              listeners: {\n                selectionchange: app.setButtons\n              }\n            }]\n          });\n          if (!firstCard)\n            firstCard = card;\n        });\n        app.controlTab.setActiveTab(firstCard);\n      }\n    });\n  },\n  verifyJson: function(value, force) {\n    var json = {};\n    if (value) {\n      try {\n        if (force || (Ext.String.startsWith(value, '{') || Ext.String.startsWith(value, '[')))\n          json = Wb.decode(value);\n      } catch (e) {\n        Wb.warn('\"' + value + '\" 不是一个有效的JSON表达式。');\n        return false;\n      }\n    }\n    return json;\n  },\n  editItem: function() {\n    var rec, recData, paramValue, index, propertyGrid = app.activeCard.getActiveTab();\n    rec = propertyGrid.getSelection()[0];\n    if (!rec) {\n      Wb.warn('请选择需要修改的条目。');\n      return;\n    }\n    if (propertyGrid.itemId == 'general') {\n      Wb.prompt({\n        title: '修改条目 - ' + rec.data.name,\n        iconCls: 'table_edit_icon',\n        width: 550,\n        items: [{\n          fieldLabel: '名称',\n          itemId: 'name',\n          xtype: 'combobox',\n          forceSelection: true,\n          allowBlank: false,\n          value: rec.data.name,\n          store: app.generalEnum\n        }, {\n          fieldLabel: '值',\n          itemId: 'value',\n          xtype: 'textarea',\n          value: rec.data.value,\n          anchor: '0 -50'\n        }],\n        handler: function(values, win) {\n          if (!app.verifyJson(values.value))\n            return;\n          propertyGrid.setProperty(values.name, values.value, true);\n          app.propertyChange();\n          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\n          win.close();\n        }\n      });\n    } else {\n      try {\n        if (rec.data.value)\n          recData = Wb.decode(rec.data.value);\n        else recData = {};\n      } catch (e) {\n        Wb.warn('\"' + rec.data.value + '\" 不是一个有效的JSON表达式。');\n        return;\n      }\n      paramValue = Ext.apply({}, recData);\n      delete paramValue.type;\n      if (Ext.Object.isEmpty(paramValue))\n        paramValue = '';\n      else\n        paramValue = Ext.encode(paramValue);\n\n      Wb.prompt({\n        title: '修改条目 - ' + rec.data.name,\n        iconCls: 'table_edit_icon',\n        width: 550,\n        items: [{\n          fieldLabel: '类别',\n          itemId: 'type',\n          xtype: 'combobox',\n          forceSelection: true,\n          value: recData.type,\n          allowBlank: false,\n          store: app[propertyGrid.itemId + 'Enum']\n        }, {\n          fieldLabel: '参数',\n          xtype: 'textarea',\n          anchor: '0 -50',\n          itemId: 'params',\n          value: paramValue\n        }],\n        handler: function(values, win) {\n          var json;\n          if (values.params) {\n            json = app.verifyJson(values.params, true);\n            if (!json)\n              return;\n            if (!Ext.isObject(json)) {\n              Wb.warn('值不是JSON对象。');\n              return;\n            }\n          } else json = {};\n          propertyGrid.setProperty(rec.data.name, Wb.encode(Ext.apply(json, {\n            type: values.type\n          })), true);\n          app.propertyChange();\n          win.close();\n        }\n      });\n    }\n  },\n  deleteControl: function() {\n    var sels = Wb.reverse(app.controlTree.getSelection()),\n      nodes = [];\n    if (Wb.indexOf(sels, app.controlTree.getRootNode()) != -1) {\n      Wb.warn('不能删除全部控件。');\n      return;\n    }\n    Wb.each(sels, function(n) {\n      nodes.push(n.data.id);\n    });\n    Wb.confirm(sels.length == 1 ? '确定要删除 \"' + sels[0].data.text + '\" 吗？' : '确定要删除选择的 ' + sels.length + ' 项吗？', function() {\n      Wb.request({\n        url: 'm?xwl=dev/cm/delete',\n        params: {\n          controls: Wb.encode(nodes)\n        },\n        success: function() {\n          var tab;\n          Wb.each(sels, function(node) {\n            node.cascadeBy(function(n) {\n              tab = app.controlTab.getComponent(n.data.id);\n              if (tab) {\n                tab.isModified = false;\n                tab.close();\n              }\n            });\n          });\n          Wb.remove(app.controlTree, sels);\n        }\n      });\n    });\n  },\n  copyControl: function() {\n    var control = app.controlTree.getSelection()[0];\n    Wb.prompt({\n      title: '复制控件 - ' + control.data.text,\n      items: [{\n        fieldLabel: '名称',\n        validator: Wb.verifyName,\n        itemId: 'name',\n        allowBlank: false\n      }],\n      handler: function(values, win) {\n        Wb.request({\n          url: 'm?xwl=dev/cm/copy',\n          params: {\n            source: control.data.id,\n            dest: values.name\n          },\n          success: function() {\n            Wb.insertAfter({\n              id: values.name,\n              text: values.name,\n              iconCls: control.data.iconCls,\n              leaf: true\n            }, control);\n            win.close();\n          }\n        });\n      }\n    });\n  },\n  rename: function() {\n    var node = app.controlTree.getSelection()[0];\n    Wb.prompt({\n      title: '修改目录名称 - ' + node.data.text,\n      iconCls: 'edit_icon',\n      items: [{\n        fieldLabel: '名称',\n        itemId: 'name',\n        allowBlank: false\n      }],\n      handler: function(values, win) {\n        Wb.request({\n          url: 'm?xwl=dev/cm/rename',\n          params: {\n            id: node.data.id,\n            newName: values.name\n          },\n          success: function() {\n            node.set('text', values.name);\n            node.commit();\n            win.close();\n          }\n        });\n      }\n    });\n  },\n  closeAll: function() {\n    app.controlTab.items.each(function(tab) {\n      if (tab.isModified) {\n        app.controlTab.setActiveTab(tab);\n        Wb.choose('\"' + tab.itemId + '\" 已经被修改，保存所做的更改吗？',\n          function(btn) {\n            if (btn == 'yes')\n              app.saveControls(false, app.closeAll);\n            else if (btn == 'no') {\n              Wb.unModified(tab);\n              app.closeAll();\n            }\n          });\n        return false;\n      } else\n        tab.close();\n    });\n  },\n  setButtons: function() {\n    var noActiveCard, controlNotSelected, generalActived, activeGrid,\n      hasModified = Wb.getModifiedTitle(app.controlTab) !== null,\n      sels = app.controlTree.getSelection();\n    controlNotSelected = sels.length === 0;\n    app.openBtn.setDisabled(controlNotSelected);\n    app.deleteBtn.setDisabled(controlNotSelected);\n    app.saveBtn.setDisabled(!(app.activeCard && app.activeCard.isModified));\n    app.saveAllBtn.setDisabled(!hasModified);\n    app.copyBtn.setDisabled(sels.length != 1 || !sels[0].isLeaf());\n    app.renameBtn.setDisabled(sels.length != 1 || sels[0].isLeaf());\n    noActiveCard = !app.activeCard;\n    app.closeAllBtn.setDisabled(noActiveCard);\n    if (app.activeCard)\n      activeGrid = app.activeCard.getActiveTab();\n    generalActived = app.activeCard && activeGrid && activeGrid.itemId == 'general';\n    app.addItemBtn.setDisabled(noActiveCard);\n    app.editItemBtn.setDisabled(!activeGrid || activeGrid.getSelection().length === 0);\n    app.deleteItemBtn.setDisabled(app.editItemBtn.disabled);\n    app.copyItemsBtn.setDisabled(noActiveCard);\n    app.pasteItemsBtn.setDisabled(noActiveCard || !app.clipboard);\n  },\n  deleteItem: function() {\n    var editor, config, grid = app.activeCard.getActiveTab(),\n      rec = grid.getSelection()[0];\n    config = grid.sourceConfig[rec.data.name];\n    if (config)\n      editor = config.editor;\n    if (editor && Ext.isFunction(editor.destroy))\n      editor.destroy();\n    Wb.remove(grid);\n    app.propertyChange();\n  },\n  copyItems: function() {\n    var card = app.activeCard,\n      data = [];\n    card.items.each(function(grid) {\n      data.push(Ext.clone(grid.getSource()));\n    });\n    app.clipboard = data;\n    app.setButtons();\n  },\n  pasteItems: function() {\n    var mergeItems, sorters, index = 0;\n    app.activeCard.items.each(function(grid) {\n      mergeItems = Ext.applyIf(grid.getSource(), app.clipboard[index++]);\n      sorters = grid.store.sorters.items[0];\n      grid.setSource(mergeItems);\n      Wb.each(mergeItems, function(key) {\n        if (!grid.sourceConfig[key])\n          grid.sourceConfig[key] = {\n            editor: app.createTrigger()\n          };\n      });\n      grid.store.sort(sorters.property, sorters.direction);\n    });\n    Wb.setModified(app.activeCard);\n  },\n  addItem: function() {\n    if (app.addItemBtn.disabled)\n      return;\n    var rec, propertyGrid = app.activeCard.getActiveTab();\n    if (propertyGrid.itemId == 'general') {\n      Wb.prompt({\n        title: '添加条目',\n        iconCls: 'table_add_icon',\n        width: 550,\n        items: [{\n          fieldLabel: '名称',\n          itemId: 'name',\n          xtype: 'combobox',\n          forceSelection: true,\n          allowBlank: false,\n          store: app.generalEnum\n        }, {\n          fieldLabel: '值',\n          itemId: 'value',\n          xtype: 'textarea',\n          anchor: '0 -50'\n        }],\n        handler: function(values, win) {\n          if (!app.verifyJson(values.value))\n            return;\n          rec = Wb.find(propertyGrid.store, 'name', values.name);\n          if (rec) {\n            Wb.warn('名称 \"' + values.name + '\" 已经存在。');\n            return;\n          }\n          propertyGrid.setProperty(values.name, values.value, true);\n          propertyGrid.sourceConfig[values.name] = {\n            editor: app.createTrigger()\n          };\n          app.propertyChange();\n          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\n          win.close();\n        }\n      });\n    } else {\n      Wb.prompt({\n        title: '添加条目',\n        iconCls: 'table_add_icon',\n        width: 550,\n        items: [{\n          fieldLabel: '名称',\n          itemId: 'name',\n          allowBlank: false\n        }, {\n          fieldLabel: '类别',\n          itemId: 'type',\n          xtype: 'combobox',\n          forceSelection: true,\n          allowBlank: false,\n          saveKeyname: 'sys.cm.types',\n          store: app[propertyGrid.itemId + 'Enum']\n        }, {\n          fieldLabel: '参数',\n          itemId: 'params',\n          xtype: 'textarea',\n          anchor: '0 -85'\n        }],\n        handler: function(values, win) {\n          var json;\n          if (values.params) {\n            json = app.verifyJson(values.params, true);\n            if (!json)\n              return;\n            if (!Ext.isObject(json)) {\n              Wb.warn('值不是JSON对象。');\n              return;\n            }\n          } else json = {};\n          rec = Wb.find(propertyGrid.store, 'name', values.name);\n          if (rec) {\n            Wb.warn('名称 \"' + values.name + '\" 已经存在。');\n            return;\n          }\n          propertyGrid.setProperty(values.name, Wb.encode(Ext.apply(json, {\n            type: values.type\n          })), true);\n          propertyGrid.sourceConfig[values.name] = {\n            editor: app.createTrigger()\n          };\n          app.propertyChange();\n          propertyGrid.setSelection(Wb.find(propertyGrid.store, 'name', values.name));\n          win.close();\n        }\n      });\n    }\n  }\n});\napp.activeCard = null;"}}],"roles":{},"title":"控件管理","iconCls":"view_icon","inframe":false,"pageLink":""}